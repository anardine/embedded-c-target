
arraySwap.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001320  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  080014c0  080014c0  000024c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001554  08001554  0000305c  2**0
                  CONTENTS
  4 .ARM          00000008  08001554  08001554  00002554  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800155c  0800155c  0000305c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800155c  0800155c  0000255c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08001560  08001560  00002560  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  08001564  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000016c  2000005c  080015c0  0000305c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001c8  080015c0  000031c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000305c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00000af0  00000000  00000000  0000308c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000003bc  00000000  00000000  00003b7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000120  00000000  00000000  00003f38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000000c5  00000000  00000000  00004058  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002b78  00000000  00000000  0000411d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000013bd  00000000  00000000  00006c95  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00009819  00000000  00000000  00008052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0001186b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000b44  00000000  00000000  000118b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000079  00000000  00000000  000123f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080014a8 	.word	0x080014a8

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	080014a8 	.word	0x080014a8

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	b082      	sub	sp, #8
 8000284:	af00      	add	r7, sp, #0

	int32_t *pToUserArrays = fetchArrayFromUser();
 8000286:	f000 f815 	bl	80002b4 <fetchArrayFromUser>
 800028a:	6078      	str	r0, [r7, #4]

	printf("%p\n", pToUserArrays);
 800028c:	6879      	ldr	r1, [r7, #4]
 800028e:	4808      	ldr	r0, [pc, #32]	@ (80002b0 <main+0x30>)
 8000290:	f000 fa9e 	bl	80007d0 <iprintf>
	printf("%p\n", pToUserArrays+1);
 8000294:	687b      	ldr	r3, [r7, #4]
 8000296:	3304      	adds	r3, #4
 8000298:	4619      	mov	r1, r3
 800029a:	4805      	ldr	r0, [pc, #20]	@ (80002b0 <main+0x30>)
 800029c:	f000 fa98 	bl	80007d0 <iprintf>

	swapArrays(pToUserArrays);
 80002a0:	6878      	ldr	r0, [r7, #4]
 80002a2:	f000 f83f 	bl	8000324 <swapArrays>

	return 0;
 80002a6:	2300      	movs	r3, #0

}
 80002a8:	4618      	mov	r0, r3
 80002aa:	3708      	adds	r7, #8
 80002ac:	46bd      	mov	sp, r7
 80002ae:	bd80      	pop	{r7, pc}
 80002b0:	080014c0 	.word	0x080014c0

080002b4 <fetchArrayFromUser>:



int32_t* fetchArrayFromUser(void){
 80002b4:	b480      	push	{r7}
 80002b6:	b08f      	sub	sp, #60	@ 0x3c
 80002b8:	af00      	add	r7, sp, #0

	int n1 = 2;
 80002ba:	2302      	movs	r3, #2
 80002bc:	627b      	str	r3, [r7, #36]	@ 0x24
//	printf("enter the quantity of elements in the first array\n");
//	scanf("%d", &n1);

	int n2 = 2;
 80002be:	2302      	movs	r3, #2
 80002c0:	623b      	str	r3, [r7, #32]
//	printf("enter the quantity of elements in the second array\n");
//	scanf("%d", &n2);

	int32_t array1[2] = {1,2};
 80002c2:	4a16      	ldr	r2, [pc, #88]	@ (800031c <fetchArrayFromUser+0x68>)
 80002c4:	f107 0318 	add.w	r3, r7, #24
 80002c8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002cc:	e883 0003 	stmia.w	r3, {r0, r1}
	int32_t array2[2] = {3,4};
 80002d0:	4a13      	ldr	r2, [pc, #76]	@ (8000320 <fetchArrayFromUser+0x6c>)
 80002d2:	f107 0310 	add.w	r3, r7, #16
 80002d6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80002da:	e883 0003 	stmia.w	r3, {r0, r1}
//	for(int i = 0; i < n2; i++){
//		printf("please enter the number for the %d position of the second array", i);
//		scanf("%d", &array2[i]);
//	}

	int32_t *memAddr1 = (int32_t*) &array1;
 80002de:	f107 0318 	add.w	r3, r7, #24
 80002e2:	637b      	str	r3, [r7, #52]	@ 0x34
	int32_t *memAddr2 = (int32_t*) &array2;
 80002e4:	f107 0310 	add.w	r3, r7, #16
 80002e8:	633b      	str	r3, [r7, #48]	@ 0x30

	int *pToquant1 = &n1;
 80002ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80002ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int *pToquant2 = &n2;
 80002f0:	f107 0320 	add.w	r3, r7, #32
 80002f4:	62bb      	str	r3, [r7, #40]	@ 0x28

	int32_t returnedArray[] = {*memAddr1, *memAddr2, *pToquant1, *pToquant2};
 80002f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80002f8:	681b      	ldr	r3, [r3, #0]
 80002fa:	603b      	str	r3, [r7, #0]
 80002fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	607b      	str	r3, [r7, #4]
 8000302:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000304:	681b      	ldr	r3, [r3, #0]
 8000306:	60bb      	str	r3, [r7, #8]
 8000308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800030a:	681b      	ldr	r3, [r3, #0]
 800030c:	60fb      	str	r3, [r7, #12]

	return (int32_t*) returnedArray;
 800030e:	2300      	movs	r3, #0

}
 8000310:	4618      	mov	r0, r3
 8000312:	373c      	adds	r7, #60	@ 0x3c
 8000314:	46bd      	mov	sp, r7
 8000316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800031a:	4770      	bx	lr
 800031c:	080014c4 	.word	0x080014c4
 8000320:	080014cc 	.word	0x080014cc

08000324 <swapArrays>:



void swapArrays(int32_t const *arrayAddr) {
 8000324:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000328:	b091      	sub	sp, #68	@ 0x44
 800032a:	af00      	add	r7, sp, #0
 800032c:	60f8      	str	r0, [r7, #12]
 800032e:	466b      	mov	r3, sp
 8000330:	461e      	mov	r6, r3

	int32_t *array1StartOffeset = arrayAddr;
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	62fb      	str	r3, [r7, #44]	@ 0x2c
	int32_t *array2StartOffeset = arrayAddr+1;
 8000336:	68fb      	ldr	r3, [r7, #12]
 8000338:	3304      	adds	r3, #4
 800033a:	62bb      	str	r3, [r7, #40]	@ 0x28

	int32_t array1Size = *(arrayAddr+2);
 800033c:	68fb      	ldr	r3, [r7, #12]
 800033e:	3308      	adds	r3, #8
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	627b      	str	r3, [r7, #36]	@ 0x24
	int32_t array2Size = *(arrayAddr+3);
 8000344:	68fb      	ldr	r3, [r7, #12]
 8000346:	330c      	adds	r3, #12
 8000348:	681b      	ldr	r3, [r3, #0]
 800034a:	623b      	str	r3, [r7, #32]

	int32_t newArray1[array2Size];
 800034c:	6a39      	ldr	r1, [r7, #32]
 800034e:	1e4b      	subs	r3, r1, #1
 8000350:	61fb      	str	r3, [r7, #28]
 8000352:	460a      	mov	r2, r1
 8000354:	2300      	movs	r3, #0
 8000356:	603a      	str	r2, [r7, #0]
 8000358:	607b      	str	r3, [r7, #4]
 800035a:	f04f 0200 	mov.w	r2, #0
 800035e:	f04f 0300 	mov.w	r3, #0
 8000362:	6878      	ldr	r0, [r7, #4]
 8000364:	0143      	lsls	r3, r0, #5
 8000366:	6838      	ldr	r0, [r7, #0]
 8000368:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800036c:	6838      	ldr	r0, [r7, #0]
 800036e:	0142      	lsls	r2, r0, #5
 8000370:	460a      	mov	r2, r1
 8000372:	2300      	movs	r3, #0
 8000374:	4692      	mov	sl, r2
 8000376:	469b      	mov	fp, r3
 8000378:	f04f 0200 	mov.w	r2, #0
 800037c:	f04f 0300 	mov.w	r3, #0
 8000380:	ea4f 134b 	mov.w	r3, fp, lsl #5
 8000384:	ea43 63da 	orr.w	r3, r3, sl, lsr #27
 8000388:	ea4f 124a 	mov.w	r2, sl, lsl #5
 800038c:	460b      	mov	r3, r1
 800038e:	009b      	lsls	r3, r3, #2
 8000390:	3307      	adds	r3, #7
 8000392:	08db      	lsrs	r3, r3, #3
 8000394:	00db      	lsls	r3, r3, #3
 8000396:	ebad 0d03 	sub.w	sp, sp, r3
 800039a:	466b      	mov	r3, sp
 800039c:	3303      	adds	r3, #3
 800039e:	089b      	lsrs	r3, r3, #2
 80003a0:	009b      	lsls	r3, r3, #2
 80003a2:	61bb      	str	r3, [r7, #24]

	for (int32_t i = 0; i< array2Size; i++) {
 80003a4:	2300      	movs	r3, #0
 80003a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80003a8:	e00b      	b.n	80003c2 <swapArrays+0x9e>

		newArray1[i] = array2StartOffeset[i];
 80003aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80003ac:	009b      	lsls	r3, r3, #2
 80003ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80003b0:	4413      	add	r3, r2
 80003b2:	6819      	ldr	r1, [r3, #0]
 80003b4:	69bb      	ldr	r3, [r7, #24]
 80003b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80003b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int32_t i = 0; i< array2Size; i++) {
 80003bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80003be:	3301      	adds	r3, #1
 80003c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80003c2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80003c4:	6a3b      	ldr	r3, [r7, #32]
 80003c6:	429a      	cmp	r2, r3
 80003c8:	dbef      	blt.n	80003aa <swapArrays+0x86>

	}

	int32_t newArray2[array1Size];
 80003ca:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80003cc:	1e4b      	subs	r3, r1, #1
 80003ce:	617b      	str	r3, [r7, #20]
 80003d0:	460a      	mov	r2, r1
 80003d2:	2300      	movs	r3, #0
 80003d4:	4690      	mov	r8, r2
 80003d6:	4699      	mov	r9, r3
 80003d8:	f04f 0200 	mov.w	r2, #0
 80003dc:	f04f 0300 	mov.w	r3, #0
 80003e0:	ea4f 1349 	mov.w	r3, r9, lsl #5
 80003e4:	ea43 63d8 	orr.w	r3, r3, r8, lsr #27
 80003e8:	ea4f 1248 	mov.w	r2, r8, lsl #5
 80003ec:	460a      	mov	r2, r1
 80003ee:	2300      	movs	r3, #0
 80003f0:	4614      	mov	r4, r2
 80003f2:	461d      	mov	r5, r3
 80003f4:	f04f 0200 	mov.w	r2, #0
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	016b      	lsls	r3, r5, #5
 80003fe:	ea43 63d4 	orr.w	r3, r3, r4, lsr #27
 8000402:	0162      	lsls	r2, r4, #5
 8000404:	460b      	mov	r3, r1
 8000406:	009b      	lsls	r3, r3, #2
 8000408:	3307      	adds	r3, #7
 800040a:	08db      	lsrs	r3, r3, #3
 800040c:	00db      	lsls	r3, r3, #3
 800040e:	ebad 0d03 	sub.w	sp, sp, r3
 8000412:	466b      	mov	r3, sp
 8000414:	3303      	adds	r3, #3
 8000416:	089b      	lsrs	r3, r3, #2
 8000418:	009b      	lsls	r3, r3, #2
 800041a:	613b      	str	r3, [r7, #16]

	for (int32_t i = 0; i< array1Size; i++) {
 800041c:	2300      	movs	r3, #0
 800041e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8000420:	e00b      	b.n	800043a <swapArrays+0x116>

		newArray2[i] = array1StartOffeset[i];
 8000422:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000424:	009b      	lsls	r3, r3, #2
 8000426:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8000428:	4413      	add	r3, r2
 800042a:	6819      	ldr	r1, [r3, #0]
 800042c:	693b      	ldr	r3, [r7, #16]
 800042e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000430:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	for (int32_t i = 0; i< array1Size; i++) {
 8000434:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000436:	3301      	adds	r3, #1
 8000438:	63bb      	str	r3, [r7, #56]	@ 0x38
 800043a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800043c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800043e:	429a      	cmp	r2, r3
 8000440:	dbef      	blt.n	8000422 <swapArrays+0xfe>

	}

	printf("the new elements of array one are:");
 8000442:	4818      	ldr	r0, [pc, #96]	@ (80004a4 <swapArrays+0x180>)
 8000444:	f000 f9c4 	bl	80007d0 <iprintf>
	for (int32_t i = 0; i< array2Size; i++) {
 8000448:	2300      	movs	r3, #0
 800044a:	637b      	str	r3, [r7, #52]	@ 0x34
 800044c:	e00a      	b.n	8000464 <swapArrays+0x140>

		printf("%d\t",newArray1[i]);
 800044e:	69bb      	ldr	r3, [r7, #24]
 8000450:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000452:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000456:	4619      	mov	r1, r3
 8000458:	4813      	ldr	r0, [pc, #76]	@ (80004a8 <swapArrays+0x184>)
 800045a:	f000 f9b9 	bl	80007d0 <iprintf>
	for (int32_t i = 0; i< array2Size; i++) {
 800045e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000460:	3301      	adds	r3, #1
 8000462:	637b      	str	r3, [r7, #52]	@ 0x34
 8000464:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8000466:	6a3b      	ldr	r3, [r7, #32]
 8000468:	429a      	cmp	r2, r3
 800046a:	dbf0      	blt.n	800044e <swapArrays+0x12a>

	}

	printf("the new elements of array two are:");
 800046c:	480f      	ldr	r0, [pc, #60]	@ (80004ac <swapArrays+0x188>)
 800046e:	f000 f9af 	bl	80007d0 <iprintf>
	for (int32_t i = 0; i< array1Size; i++) {
 8000472:	2300      	movs	r3, #0
 8000474:	633b      	str	r3, [r7, #48]	@ 0x30
 8000476:	e00a      	b.n	800048e <swapArrays+0x16a>

		printf("%d\t",newArray2[i]);
 8000478:	693b      	ldr	r3, [r7, #16]
 800047a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800047c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000480:	4619      	mov	r1, r3
 8000482:	4809      	ldr	r0, [pc, #36]	@ (80004a8 <swapArrays+0x184>)
 8000484:	f000 f9a4 	bl	80007d0 <iprintf>
	for (int32_t i = 0; i< array1Size; i++) {
 8000488:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800048a:	3301      	adds	r3, #1
 800048c:	633b      	str	r3, [r7, #48]	@ 0x30
 800048e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000490:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000492:	429a      	cmp	r2, r3
 8000494:	dbf0      	blt.n	8000478 <swapArrays+0x154>
 8000496:	46b5      	mov	sp, r6

	}

}
 8000498:	bf00      	nop
 800049a:	3744      	adds	r7, #68	@ 0x44
 800049c:	46bd      	mov	sp, r7
 800049e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004a2:	bf00      	nop
 80004a4:	080014d4 	.word	0x080014d4
 80004a8:	080014f8 	.word	0x080014f8
 80004ac:	080014fc 	.word	0x080014fc

080004b0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80004b0:	b580      	push	{r7, lr}
 80004b2:	b086      	sub	sp, #24
 80004b4:	af00      	add	r7, sp, #0
 80004b6:	60f8      	str	r0, [r7, #12]
 80004b8:	60b9      	str	r1, [r7, #8]
 80004ba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004bc:	2300      	movs	r3, #0
 80004be:	617b      	str	r3, [r7, #20]
 80004c0:	e00a      	b.n	80004d8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80004c2:	f3af 8000 	nop.w
 80004c6:	4601      	mov	r1, r0
 80004c8:	68bb      	ldr	r3, [r7, #8]
 80004ca:	1c5a      	adds	r2, r3, #1
 80004cc:	60ba      	str	r2, [r7, #8]
 80004ce:	b2ca      	uxtb	r2, r1
 80004d0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004d2:	697b      	ldr	r3, [r7, #20]
 80004d4:	3301      	adds	r3, #1
 80004d6:	617b      	str	r3, [r7, #20]
 80004d8:	697a      	ldr	r2, [r7, #20]
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	429a      	cmp	r2, r3
 80004de:	dbf0      	blt.n	80004c2 <_read+0x12>
  }

  return len;
 80004e0:	687b      	ldr	r3, [r7, #4]
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	3718      	adds	r7, #24
 80004e6:	46bd      	mov	sp, r7
 80004e8:	bd80      	pop	{r7, pc}

080004ea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80004ea:	b580      	push	{r7, lr}
 80004ec:	b086      	sub	sp, #24
 80004ee:	af00      	add	r7, sp, #0
 80004f0:	60f8      	str	r0, [r7, #12]
 80004f2:	60b9      	str	r1, [r7, #8]
 80004f4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80004f6:	2300      	movs	r3, #0
 80004f8:	617b      	str	r3, [r7, #20]
 80004fa:	e009      	b.n	8000510 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80004fc:	68bb      	ldr	r3, [r7, #8]
 80004fe:	1c5a      	adds	r2, r3, #1
 8000500:	60ba      	str	r2, [r7, #8]
 8000502:	781b      	ldrb	r3, [r3, #0]
 8000504:	4618      	mov	r0, r3
 8000506:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800050a:	697b      	ldr	r3, [r7, #20]
 800050c:	3301      	adds	r3, #1
 800050e:	617b      	str	r3, [r7, #20]
 8000510:	697a      	ldr	r2, [r7, #20]
 8000512:	687b      	ldr	r3, [r7, #4]
 8000514:	429a      	cmp	r2, r3
 8000516:	dbf1      	blt.n	80004fc <_write+0x12>
  }
  return len;
 8000518:	687b      	ldr	r3, [r7, #4]
}
 800051a:	4618      	mov	r0, r3
 800051c:	3718      	adds	r7, #24
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}

08000522 <_close>:

int _close(int file)
{
 8000522:	b480      	push	{r7}
 8000524:	b083      	sub	sp, #12
 8000526:	af00      	add	r7, sp, #0
 8000528:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800052a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800052e:	4618      	mov	r0, r3
 8000530:	370c      	adds	r7, #12
 8000532:	46bd      	mov	sp, r7
 8000534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000538:	4770      	bx	lr

0800053a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800053a:	b480      	push	{r7}
 800053c:	b083      	sub	sp, #12
 800053e:	af00      	add	r7, sp, #0
 8000540:	6078      	str	r0, [r7, #4]
 8000542:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000544:	683b      	ldr	r3, [r7, #0]
 8000546:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800054a:	605a      	str	r2, [r3, #4]
  return 0;
 800054c:	2300      	movs	r3, #0
}
 800054e:	4618      	mov	r0, r3
 8000550:	370c      	adds	r7, #12
 8000552:	46bd      	mov	sp, r7
 8000554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000558:	4770      	bx	lr

0800055a <_isatty>:

int _isatty(int file)
{
 800055a:	b480      	push	{r7}
 800055c:	b083      	sub	sp, #12
 800055e:	af00      	add	r7, sp, #0
 8000560:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000562:	2301      	movs	r3, #1
}
 8000564:	4618      	mov	r0, r3
 8000566:	370c      	adds	r7, #12
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000570:	b480      	push	{r7}
 8000572:	b085      	sub	sp, #20
 8000574:	af00      	add	r7, sp, #0
 8000576:	60f8      	str	r0, [r7, #12]
 8000578:	60b9      	str	r1, [r7, #8]
 800057a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800057c:	2300      	movs	r3, #0
}
 800057e:	4618      	mov	r0, r3
 8000580:	3714      	adds	r7, #20
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
	...

0800058c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b086      	sub	sp, #24
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000594:	4a14      	ldr	r2, [pc, #80]	@ (80005e8 <_sbrk+0x5c>)
 8000596:	4b15      	ldr	r3, [pc, #84]	@ (80005ec <_sbrk+0x60>)
 8000598:	1ad3      	subs	r3, r2, r3
 800059a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800059c:	697b      	ldr	r3, [r7, #20]
 800059e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80005a0:	4b13      	ldr	r3, [pc, #76]	@ (80005f0 <_sbrk+0x64>)
 80005a2:	681b      	ldr	r3, [r3, #0]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d102      	bne.n	80005ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80005a8:	4b11      	ldr	r3, [pc, #68]	@ (80005f0 <_sbrk+0x64>)
 80005aa:	4a12      	ldr	r2, [pc, #72]	@ (80005f4 <_sbrk+0x68>)
 80005ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80005ae:	4b10      	ldr	r3, [pc, #64]	@ (80005f0 <_sbrk+0x64>)
 80005b0:	681a      	ldr	r2, [r3, #0]
 80005b2:	687b      	ldr	r3, [r7, #4]
 80005b4:	4413      	add	r3, r2
 80005b6:	693a      	ldr	r2, [r7, #16]
 80005b8:	429a      	cmp	r2, r3
 80005ba:	d207      	bcs.n	80005cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80005bc:	f000 f922 	bl	8000804 <__errno>
 80005c0:	4603      	mov	r3, r0
 80005c2:	220c      	movs	r2, #12
 80005c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80005c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005ca:	e009      	b.n	80005e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80005cc:	4b08      	ldr	r3, [pc, #32]	@ (80005f0 <_sbrk+0x64>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80005d2:	4b07      	ldr	r3, [pc, #28]	@ (80005f0 <_sbrk+0x64>)
 80005d4:	681a      	ldr	r2, [r3, #0]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	4413      	add	r3, r2
 80005da:	4a05      	ldr	r2, [pc, #20]	@ (80005f0 <_sbrk+0x64>)
 80005dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80005de:	68fb      	ldr	r3, [r7, #12]
}
 80005e0:	4618      	mov	r0, r3
 80005e2:	3718      	adds	r7, #24
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20020000 	.word	0x20020000
 80005ec:	00000400 	.word	0x00000400
 80005f0:	20000078 	.word	0x20000078
 80005f4:	200001c8 	.word	0x200001c8

080005f8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80005f8:	480d      	ldr	r0, [pc, #52]	@ (8000630 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80005fa:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80005fc:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000600:	480c      	ldr	r0, [pc, #48]	@ (8000634 <LoopForever+0x6>)
  ldr r1, =_edata
 8000602:	490d      	ldr	r1, [pc, #52]	@ (8000638 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000604:	4a0d      	ldr	r2, [pc, #52]	@ (800063c <LoopForever+0xe>)
  movs r3, #0
 8000606:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000608:	e002      	b.n	8000610 <LoopCopyDataInit>

0800060a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800060a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800060c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800060e:	3304      	adds	r3, #4

08000610 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000610:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000612:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000614:	d3f9      	bcc.n	800060a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000616:	4a0a      	ldr	r2, [pc, #40]	@ (8000640 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000618:	4c0a      	ldr	r4, [pc, #40]	@ (8000644 <LoopForever+0x16>)
  movs r3, #0
 800061a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800061c:	e001      	b.n	8000622 <LoopFillZerobss>

0800061e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800061e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000620:	3204      	adds	r2, #4

08000622 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000622:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000624:	d3fb      	bcc.n	800061e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000626:	f000 f8f3 	bl	8000810 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800062a:	f7ff fe29 	bl	8000280 <main>

0800062e <LoopForever>:

LoopForever:
  b LoopForever
 800062e:	e7fe      	b.n	800062e <LoopForever>
  ldr   r0, =_estack
 8000630:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000634:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000638:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 800063c:	08001564 	.word	0x08001564
  ldr r2, =_sbss
 8000640:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8000644:	200001c8 	.word	0x200001c8

08000648 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000648:	e7fe      	b.n	8000648 <ADC_IRQHandler>
	...

0800064c <std>:
 800064c:	2300      	movs	r3, #0
 800064e:	b510      	push	{r4, lr}
 8000650:	4604      	mov	r4, r0
 8000652:	e9c0 3300 	strd	r3, r3, [r0]
 8000656:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800065a:	6083      	str	r3, [r0, #8]
 800065c:	8181      	strh	r1, [r0, #12]
 800065e:	6643      	str	r3, [r0, #100]	@ 0x64
 8000660:	81c2      	strh	r2, [r0, #14]
 8000662:	6183      	str	r3, [r0, #24]
 8000664:	4619      	mov	r1, r3
 8000666:	2208      	movs	r2, #8
 8000668:	305c      	adds	r0, #92	@ 0x5c
 800066a:	f000 f8c3 	bl	80007f4 <memset>
 800066e:	4b0d      	ldr	r3, [pc, #52]	@ (80006a4 <std+0x58>)
 8000670:	6263      	str	r3, [r4, #36]	@ 0x24
 8000672:	4b0d      	ldr	r3, [pc, #52]	@ (80006a8 <std+0x5c>)
 8000674:	62a3      	str	r3, [r4, #40]	@ 0x28
 8000676:	4b0d      	ldr	r3, [pc, #52]	@ (80006ac <std+0x60>)
 8000678:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800067a:	4b0d      	ldr	r3, [pc, #52]	@ (80006b0 <std+0x64>)
 800067c:	6323      	str	r3, [r4, #48]	@ 0x30
 800067e:	4b0d      	ldr	r3, [pc, #52]	@ (80006b4 <std+0x68>)
 8000680:	6224      	str	r4, [r4, #32]
 8000682:	429c      	cmp	r4, r3
 8000684:	d006      	beq.n	8000694 <std+0x48>
 8000686:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800068a:	4294      	cmp	r4, r2
 800068c:	d002      	beq.n	8000694 <std+0x48>
 800068e:	33d0      	adds	r3, #208	@ 0xd0
 8000690:	429c      	cmp	r4, r3
 8000692:	d105      	bne.n	80006a0 <std+0x54>
 8000694:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8000698:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800069c:	f000 b8dc 	b.w	8000858 <__retarget_lock_init_recursive>
 80006a0:	bd10      	pop	{r4, pc}
 80006a2:	bf00      	nop
 80006a4:	080010b1 	.word	0x080010b1
 80006a8:	080010d3 	.word	0x080010d3
 80006ac:	0800110b 	.word	0x0800110b
 80006b0:	0800112f 	.word	0x0800112f
 80006b4:	2000007c 	.word	0x2000007c

080006b8 <stdio_exit_handler>:
 80006b8:	4a02      	ldr	r2, [pc, #8]	@ (80006c4 <stdio_exit_handler+0xc>)
 80006ba:	4903      	ldr	r1, [pc, #12]	@ (80006c8 <stdio_exit_handler+0x10>)
 80006bc:	4803      	ldr	r0, [pc, #12]	@ (80006cc <stdio_exit_handler+0x14>)
 80006be:	f000 b869 	b.w	8000794 <_fwalk_sglue>
 80006c2:	bf00      	nop
 80006c4:	20000000 	.word	0x20000000
 80006c8:	08001049 	.word	0x08001049
 80006cc:	20000010 	.word	0x20000010

080006d0 <cleanup_stdio>:
 80006d0:	6841      	ldr	r1, [r0, #4]
 80006d2:	4b0c      	ldr	r3, [pc, #48]	@ (8000704 <cleanup_stdio+0x34>)
 80006d4:	4299      	cmp	r1, r3
 80006d6:	b510      	push	{r4, lr}
 80006d8:	4604      	mov	r4, r0
 80006da:	d001      	beq.n	80006e0 <cleanup_stdio+0x10>
 80006dc:	f000 fcb4 	bl	8001048 <_fflush_r>
 80006e0:	68a1      	ldr	r1, [r4, #8]
 80006e2:	4b09      	ldr	r3, [pc, #36]	@ (8000708 <cleanup_stdio+0x38>)
 80006e4:	4299      	cmp	r1, r3
 80006e6:	d002      	beq.n	80006ee <cleanup_stdio+0x1e>
 80006e8:	4620      	mov	r0, r4
 80006ea:	f000 fcad 	bl	8001048 <_fflush_r>
 80006ee:	68e1      	ldr	r1, [r4, #12]
 80006f0:	4b06      	ldr	r3, [pc, #24]	@ (800070c <cleanup_stdio+0x3c>)
 80006f2:	4299      	cmp	r1, r3
 80006f4:	d004      	beq.n	8000700 <cleanup_stdio+0x30>
 80006f6:	4620      	mov	r0, r4
 80006f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80006fc:	f000 bca4 	b.w	8001048 <_fflush_r>
 8000700:	bd10      	pop	{r4, pc}
 8000702:	bf00      	nop
 8000704:	2000007c 	.word	0x2000007c
 8000708:	200000e4 	.word	0x200000e4
 800070c:	2000014c 	.word	0x2000014c

08000710 <global_stdio_init.part.0>:
 8000710:	b510      	push	{r4, lr}
 8000712:	4b0b      	ldr	r3, [pc, #44]	@ (8000740 <global_stdio_init.part.0+0x30>)
 8000714:	4c0b      	ldr	r4, [pc, #44]	@ (8000744 <global_stdio_init.part.0+0x34>)
 8000716:	4a0c      	ldr	r2, [pc, #48]	@ (8000748 <global_stdio_init.part.0+0x38>)
 8000718:	601a      	str	r2, [r3, #0]
 800071a:	4620      	mov	r0, r4
 800071c:	2200      	movs	r2, #0
 800071e:	2104      	movs	r1, #4
 8000720:	f7ff ff94 	bl	800064c <std>
 8000724:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8000728:	2201      	movs	r2, #1
 800072a:	2109      	movs	r1, #9
 800072c:	f7ff ff8e 	bl	800064c <std>
 8000730:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8000734:	2202      	movs	r2, #2
 8000736:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800073a:	2112      	movs	r1, #18
 800073c:	f7ff bf86 	b.w	800064c <std>
 8000740:	200001b4 	.word	0x200001b4
 8000744:	2000007c 	.word	0x2000007c
 8000748:	080006b9 	.word	0x080006b9

0800074c <__sfp_lock_acquire>:
 800074c:	4801      	ldr	r0, [pc, #4]	@ (8000754 <__sfp_lock_acquire+0x8>)
 800074e:	f000 b884 	b.w	800085a <__retarget_lock_acquire_recursive>
 8000752:	bf00      	nop
 8000754:	200001b9 	.word	0x200001b9

08000758 <__sfp_lock_release>:
 8000758:	4801      	ldr	r0, [pc, #4]	@ (8000760 <__sfp_lock_release+0x8>)
 800075a:	f000 b87f 	b.w	800085c <__retarget_lock_release_recursive>
 800075e:	bf00      	nop
 8000760:	200001b9 	.word	0x200001b9

08000764 <__sinit>:
 8000764:	b510      	push	{r4, lr}
 8000766:	4604      	mov	r4, r0
 8000768:	f7ff fff0 	bl	800074c <__sfp_lock_acquire>
 800076c:	6a23      	ldr	r3, [r4, #32]
 800076e:	b11b      	cbz	r3, 8000778 <__sinit+0x14>
 8000770:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000774:	f7ff bff0 	b.w	8000758 <__sfp_lock_release>
 8000778:	4b04      	ldr	r3, [pc, #16]	@ (800078c <__sinit+0x28>)
 800077a:	6223      	str	r3, [r4, #32]
 800077c:	4b04      	ldr	r3, [pc, #16]	@ (8000790 <__sinit+0x2c>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	2b00      	cmp	r3, #0
 8000782:	d1f5      	bne.n	8000770 <__sinit+0xc>
 8000784:	f7ff ffc4 	bl	8000710 <global_stdio_init.part.0>
 8000788:	e7f2      	b.n	8000770 <__sinit+0xc>
 800078a:	bf00      	nop
 800078c:	080006d1 	.word	0x080006d1
 8000790:	200001b4 	.word	0x200001b4

08000794 <_fwalk_sglue>:
 8000794:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000798:	4607      	mov	r7, r0
 800079a:	4688      	mov	r8, r1
 800079c:	4614      	mov	r4, r2
 800079e:	2600      	movs	r6, #0
 80007a0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80007a4:	f1b9 0901 	subs.w	r9, r9, #1
 80007a8:	d505      	bpl.n	80007b6 <_fwalk_sglue+0x22>
 80007aa:	6824      	ldr	r4, [r4, #0]
 80007ac:	2c00      	cmp	r4, #0
 80007ae:	d1f7      	bne.n	80007a0 <_fwalk_sglue+0xc>
 80007b0:	4630      	mov	r0, r6
 80007b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80007b6:	89ab      	ldrh	r3, [r5, #12]
 80007b8:	2b01      	cmp	r3, #1
 80007ba:	d907      	bls.n	80007cc <_fwalk_sglue+0x38>
 80007bc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80007c0:	3301      	adds	r3, #1
 80007c2:	d003      	beq.n	80007cc <_fwalk_sglue+0x38>
 80007c4:	4629      	mov	r1, r5
 80007c6:	4638      	mov	r0, r7
 80007c8:	47c0      	blx	r8
 80007ca:	4306      	orrs	r6, r0
 80007cc:	3568      	adds	r5, #104	@ 0x68
 80007ce:	e7e9      	b.n	80007a4 <_fwalk_sglue+0x10>

080007d0 <iprintf>:
 80007d0:	b40f      	push	{r0, r1, r2, r3}
 80007d2:	b507      	push	{r0, r1, r2, lr}
 80007d4:	4906      	ldr	r1, [pc, #24]	@ (80007f0 <iprintf+0x20>)
 80007d6:	ab04      	add	r3, sp, #16
 80007d8:	6808      	ldr	r0, [r1, #0]
 80007da:	f853 2b04 	ldr.w	r2, [r3], #4
 80007de:	6881      	ldr	r1, [r0, #8]
 80007e0:	9301      	str	r3, [sp, #4]
 80007e2:	f000 f865 	bl	80008b0 <_vfiprintf_r>
 80007e6:	b003      	add	sp, #12
 80007e8:	f85d eb04 	ldr.w	lr, [sp], #4
 80007ec:	b004      	add	sp, #16
 80007ee:	4770      	bx	lr
 80007f0:	2000000c 	.word	0x2000000c

080007f4 <memset>:
 80007f4:	4402      	add	r2, r0
 80007f6:	4603      	mov	r3, r0
 80007f8:	4293      	cmp	r3, r2
 80007fa:	d100      	bne.n	80007fe <memset+0xa>
 80007fc:	4770      	bx	lr
 80007fe:	f803 1b01 	strb.w	r1, [r3], #1
 8000802:	e7f9      	b.n	80007f8 <memset+0x4>

08000804 <__errno>:
 8000804:	4b01      	ldr	r3, [pc, #4]	@ (800080c <__errno+0x8>)
 8000806:	6818      	ldr	r0, [r3, #0]
 8000808:	4770      	bx	lr
 800080a:	bf00      	nop
 800080c:	2000000c 	.word	0x2000000c

08000810 <__libc_init_array>:
 8000810:	b570      	push	{r4, r5, r6, lr}
 8000812:	4d0d      	ldr	r5, [pc, #52]	@ (8000848 <__libc_init_array+0x38>)
 8000814:	4c0d      	ldr	r4, [pc, #52]	@ (800084c <__libc_init_array+0x3c>)
 8000816:	1b64      	subs	r4, r4, r5
 8000818:	10a4      	asrs	r4, r4, #2
 800081a:	2600      	movs	r6, #0
 800081c:	42a6      	cmp	r6, r4
 800081e:	d109      	bne.n	8000834 <__libc_init_array+0x24>
 8000820:	4d0b      	ldr	r5, [pc, #44]	@ (8000850 <__libc_init_array+0x40>)
 8000822:	4c0c      	ldr	r4, [pc, #48]	@ (8000854 <__libc_init_array+0x44>)
 8000824:	f000 fe40 	bl	80014a8 <_init>
 8000828:	1b64      	subs	r4, r4, r5
 800082a:	10a4      	asrs	r4, r4, #2
 800082c:	2600      	movs	r6, #0
 800082e:	42a6      	cmp	r6, r4
 8000830:	d105      	bne.n	800083e <__libc_init_array+0x2e>
 8000832:	bd70      	pop	{r4, r5, r6, pc}
 8000834:	f855 3b04 	ldr.w	r3, [r5], #4
 8000838:	4798      	blx	r3
 800083a:	3601      	adds	r6, #1
 800083c:	e7ee      	b.n	800081c <__libc_init_array+0xc>
 800083e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000842:	4798      	blx	r3
 8000844:	3601      	adds	r6, #1
 8000846:	e7f2      	b.n	800082e <__libc_init_array+0x1e>
 8000848:	0800155c 	.word	0x0800155c
 800084c:	0800155c 	.word	0x0800155c
 8000850:	0800155c 	.word	0x0800155c
 8000854:	08001560 	.word	0x08001560

08000858 <__retarget_lock_init_recursive>:
 8000858:	4770      	bx	lr

0800085a <__retarget_lock_acquire_recursive>:
 800085a:	4770      	bx	lr

0800085c <__retarget_lock_release_recursive>:
 800085c:	4770      	bx	lr

0800085e <__sfputc_r>:
 800085e:	6893      	ldr	r3, [r2, #8]
 8000860:	3b01      	subs	r3, #1
 8000862:	2b00      	cmp	r3, #0
 8000864:	b410      	push	{r4}
 8000866:	6093      	str	r3, [r2, #8]
 8000868:	da08      	bge.n	800087c <__sfputc_r+0x1e>
 800086a:	6994      	ldr	r4, [r2, #24]
 800086c:	42a3      	cmp	r3, r4
 800086e:	db01      	blt.n	8000874 <__sfputc_r+0x16>
 8000870:	290a      	cmp	r1, #10
 8000872:	d103      	bne.n	800087c <__sfputc_r+0x1e>
 8000874:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000878:	f000 bc5d 	b.w	8001136 <__swbuf_r>
 800087c:	6813      	ldr	r3, [r2, #0]
 800087e:	1c58      	adds	r0, r3, #1
 8000880:	6010      	str	r0, [r2, #0]
 8000882:	7019      	strb	r1, [r3, #0]
 8000884:	4608      	mov	r0, r1
 8000886:	f85d 4b04 	ldr.w	r4, [sp], #4
 800088a:	4770      	bx	lr

0800088c <__sfputs_r>:
 800088c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800088e:	4606      	mov	r6, r0
 8000890:	460f      	mov	r7, r1
 8000892:	4614      	mov	r4, r2
 8000894:	18d5      	adds	r5, r2, r3
 8000896:	42ac      	cmp	r4, r5
 8000898:	d101      	bne.n	800089e <__sfputs_r+0x12>
 800089a:	2000      	movs	r0, #0
 800089c:	e007      	b.n	80008ae <__sfputs_r+0x22>
 800089e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80008a2:	463a      	mov	r2, r7
 80008a4:	4630      	mov	r0, r6
 80008a6:	f7ff ffda 	bl	800085e <__sfputc_r>
 80008aa:	1c43      	adds	r3, r0, #1
 80008ac:	d1f3      	bne.n	8000896 <__sfputs_r+0xa>
 80008ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080008b0 <_vfiprintf_r>:
 80008b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80008b4:	460d      	mov	r5, r1
 80008b6:	b09d      	sub	sp, #116	@ 0x74
 80008b8:	4614      	mov	r4, r2
 80008ba:	4698      	mov	r8, r3
 80008bc:	4606      	mov	r6, r0
 80008be:	b118      	cbz	r0, 80008c8 <_vfiprintf_r+0x18>
 80008c0:	6a03      	ldr	r3, [r0, #32]
 80008c2:	b90b      	cbnz	r3, 80008c8 <_vfiprintf_r+0x18>
 80008c4:	f7ff ff4e 	bl	8000764 <__sinit>
 80008c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80008ca:	07d9      	lsls	r1, r3, #31
 80008cc:	d405      	bmi.n	80008da <_vfiprintf_r+0x2a>
 80008ce:	89ab      	ldrh	r3, [r5, #12]
 80008d0:	059a      	lsls	r2, r3, #22
 80008d2:	d402      	bmi.n	80008da <_vfiprintf_r+0x2a>
 80008d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80008d6:	f7ff ffc0 	bl	800085a <__retarget_lock_acquire_recursive>
 80008da:	89ab      	ldrh	r3, [r5, #12]
 80008dc:	071b      	lsls	r3, r3, #28
 80008de:	d501      	bpl.n	80008e4 <_vfiprintf_r+0x34>
 80008e0:	692b      	ldr	r3, [r5, #16]
 80008e2:	b99b      	cbnz	r3, 800090c <_vfiprintf_r+0x5c>
 80008e4:	4629      	mov	r1, r5
 80008e6:	4630      	mov	r0, r6
 80008e8:	f000 fc64 	bl	80011b4 <__swsetup_r>
 80008ec:	b170      	cbz	r0, 800090c <_vfiprintf_r+0x5c>
 80008ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80008f0:	07dc      	lsls	r4, r3, #31
 80008f2:	d504      	bpl.n	80008fe <_vfiprintf_r+0x4e>
 80008f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80008f8:	b01d      	add	sp, #116	@ 0x74
 80008fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008fe:	89ab      	ldrh	r3, [r5, #12]
 8000900:	0598      	lsls	r0, r3, #22
 8000902:	d4f7      	bmi.n	80008f4 <_vfiprintf_r+0x44>
 8000904:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000906:	f7ff ffa9 	bl	800085c <__retarget_lock_release_recursive>
 800090a:	e7f3      	b.n	80008f4 <_vfiprintf_r+0x44>
 800090c:	2300      	movs	r3, #0
 800090e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000910:	2320      	movs	r3, #32
 8000912:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8000916:	f8cd 800c 	str.w	r8, [sp, #12]
 800091a:	2330      	movs	r3, #48	@ 0x30
 800091c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8000acc <_vfiprintf_r+0x21c>
 8000920:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8000924:	f04f 0901 	mov.w	r9, #1
 8000928:	4623      	mov	r3, r4
 800092a:	469a      	mov	sl, r3
 800092c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000930:	b10a      	cbz	r2, 8000936 <_vfiprintf_r+0x86>
 8000932:	2a25      	cmp	r2, #37	@ 0x25
 8000934:	d1f9      	bne.n	800092a <_vfiprintf_r+0x7a>
 8000936:	ebba 0b04 	subs.w	fp, sl, r4
 800093a:	d00b      	beq.n	8000954 <_vfiprintf_r+0xa4>
 800093c:	465b      	mov	r3, fp
 800093e:	4622      	mov	r2, r4
 8000940:	4629      	mov	r1, r5
 8000942:	4630      	mov	r0, r6
 8000944:	f7ff ffa2 	bl	800088c <__sfputs_r>
 8000948:	3001      	adds	r0, #1
 800094a:	f000 80a7 	beq.w	8000a9c <_vfiprintf_r+0x1ec>
 800094e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8000950:	445a      	add	r2, fp
 8000952:	9209      	str	r2, [sp, #36]	@ 0x24
 8000954:	f89a 3000 	ldrb.w	r3, [sl]
 8000958:	2b00      	cmp	r3, #0
 800095a:	f000 809f 	beq.w	8000a9c <_vfiprintf_r+0x1ec>
 800095e:	2300      	movs	r3, #0
 8000960:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000964:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000968:	f10a 0a01 	add.w	sl, sl, #1
 800096c:	9304      	str	r3, [sp, #16]
 800096e:	9307      	str	r3, [sp, #28]
 8000970:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8000974:	931a      	str	r3, [sp, #104]	@ 0x68
 8000976:	4654      	mov	r4, sl
 8000978:	2205      	movs	r2, #5
 800097a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800097e:	4853      	ldr	r0, [pc, #332]	@ (8000acc <_vfiprintf_r+0x21c>)
 8000980:	f7ff fc2e 	bl	80001e0 <memchr>
 8000984:	9a04      	ldr	r2, [sp, #16]
 8000986:	b9d8      	cbnz	r0, 80009c0 <_vfiprintf_r+0x110>
 8000988:	06d1      	lsls	r1, r2, #27
 800098a:	bf44      	itt	mi
 800098c:	2320      	movmi	r3, #32
 800098e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8000992:	0713      	lsls	r3, r2, #28
 8000994:	bf44      	itt	mi
 8000996:	232b      	movmi	r3, #43	@ 0x2b
 8000998:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800099c:	f89a 3000 	ldrb.w	r3, [sl]
 80009a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80009a2:	d015      	beq.n	80009d0 <_vfiprintf_r+0x120>
 80009a4:	9a07      	ldr	r2, [sp, #28]
 80009a6:	4654      	mov	r4, sl
 80009a8:	2000      	movs	r0, #0
 80009aa:	f04f 0c0a 	mov.w	ip, #10
 80009ae:	4621      	mov	r1, r4
 80009b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80009b4:	3b30      	subs	r3, #48	@ 0x30
 80009b6:	2b09      	cmp	r3, #9
 80009b8:	d94b      	bls.n	8000a52 <_vfiprintf_r+0x1a2>
 80009ba:	b1b0      	cbz	r0, 80009ea <_vfiprintf_r+0x13a>
 80009bc:	9207      	str	r2, [sp, #28]
 80009be:	e014      	b.n	80009ea <_vfiprintf_r+0x13a>
 80009c0:	eba0 0308 	sub.w	r3, r0, r8
 80009c4:	fa09 f303 	lsl.w	r3, r9, r3
 80009c8:	4313      	orrs	r3, r2
 80009ca:	9304      	str	r3, [sp, #16]
 80009cc:	46a2      	mov	sl, r4
 80009ce:	e7d2      	b.n	8000976 <_vfiprintf_r+0xc6>
 80009d0:	9b03      	ldr	r3, [sp, #12]
 80009d2:	1d19      	adds	r1, r3, #4
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	9103      	str	r1, [sp, #12]
 80009d8:	2b00      	cmp	r3, #0
 80009da:	bfbb      	ittet	lt
 80009dc:	425b      	neglt	r3, r3
 80009de:	f042 0202 	orrlt.w	r2, r2, #2
 80009e2:	9307      	strge	r3, [sp, #28]
 80009e4:	9307      	strlt	r3, [sp, #28]
 80009e6:	bfb8      	it	lt
 80009e8:	9204      	strlt	r2, [sp, #16]
 80009ea:	7823      	ldrb	r3, [r4, #0]
 80009ec:	2b2e      	cmp	r3, #46	@ 0x2e
 80009ee:	d10a      	bne.n	8000a06 <_vfiprintf_r+0x156>
 80009f0:	7863      	ldrb	r3, [r4, #1]
 80009f2:	2b2a      	cmp	r3, #42	@ 0x2a
 80009f4:	d132      	bne.n	8000a5c <_vfiprintf_r+0x1ac>
 80009f6:	9b03      	ldr	r3, [sp, #12]
 80009f8:	1d1a      	adds	r2, r3, #4
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	9203      	str	r2, [sp, #12]
 80009fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8000a02:	3402      	adds	r4, #2
 8000a04:	9305      	str	r3, [sp, #20]
 8000a06:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8000adc <_vfiprintf_r+0x22c>
 8000a0a:	7821      	ldrb	r1, [r4, #0]
 8000a0c:	2203      	movs	r2, #3
 8000a0e:	4650      	mov	r0, sl
 8000a10:	f7ff fbe6 	bl	80001e0 <memchr>
 8000a14:	b138      	cbz	r0, 8000a26 <_vfiprintf_r+0x176>
 8000a16:	9b04      	ldr	r3, [sp, #16]
 8000a18:	eba0 000a 	sub.w	r0, r0, sl
 8000a1c:	2240      	movs	r2, #64	@ 0x40
 8000a1e:	4082      	lsls	r2, r0
 8000a20:	4313      	orrs	r3, r2
 8000a22:	3401      	adds	r4, #1
 8000a24:	9304      	str	r3, [sp, #16]
 8000a26:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000a2a:	4829      	ldr	r0, [pc, #164]	@ (8000ad0 <_vfiprintf_r+0x220>)
 8000a2c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8000a30:	2206      	movs	r2, #6
 8000a32:	f7ff fbd5 	bl	80001e0 <memchr>
 8000a36:	2800      	cmp	r0, #0
 8000a38:	d03f      	beq.n	8000aba <_vfiprintf_r+0x20a>
 8000a3a:	4b26      	ldr	r3, [pc, #152]	@ (8000ad4 <_vfiprintf_r+0x224>)
 8000a3c:	bb1b      	cbnz	r3, 8000a86 <_vfiprintf_r+0x1d6>
 8000a3e:	9b03      	ldr	r3, [sp, #12]
 8000a40:	3307      	adds	r3, #7
 8000a42:	f023 0307 	bic.w	r3, r3, #7
 8000a46:	3308      	adds	r3, #8
 8000a48:	9303      	str	r3, [sp, #12]
 8000a4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8000a4c:	443b      	add	r3, r7
 8000a4e:	9309      	str	r3, [sp, #36]	@ 0x24
 8000a50:	e76a      	b.n	8000928 <_vfiprintf_r+0x78>
 8000a52:	fb0c 3202 	mla	r2, ip, r2, r3
 8000a56:	460c      	mov	r4, r1
 8000a58:	2001      	movs	r0, #1
 8000a5a:	e7a8      	b.n	80009ae <_vfiprintf_r+0xfe>
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	3401      	adds	r4, #1
 8000a60:	9305      	str	r3, [sp, #20]
 8000a62:	4619      	mov	r1, r3
 8000a64:	f04f 0c0a 	mov.w	ip, #10
 8000a68:	4620      	mov	r0, r4
 8000a6a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000a6e:	3a30      	subs	r2, #48	@ 0x30
 8000a70:	2a09      	cmp	r2, #9
 8000a72:	d903      	bls.n	8000a7c <_vfiprintf_r+0x1cc>
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d0c6      	beq.n	8000a06 <_vfiprintf_r+0x156>
 8000a78:	9105      	str	r1, [sp, #20]
 8000a7a:	e7c4      	b.n	8000a06 <_vfiprintf_r+0x156>
 8000a7c:	fb0c 2101 	mla	r1, ip, r1, r2
 8000a80:	4604      	mov	r4, r0
 8000a82:	2301      	movs	r3, #1
 8000a84:	e7f0      	b.n	8000a68 <_vfiprintf_r+0x1b8>
 8000a86:	ab03      	add	r3, sp, #12
 8000a88:	9300      	str	r3, [sp, #0]
 8000a8a:	462a      	mov	r2, r5
 8000a8c:	4b12      	ldr	r3, [pc, #72]	@ (8000ad8 <_vfiprintf_r+0x228>)
 8000a8e:	a904      	add	r1, sp, #16
 8000a90:	4630      	mov	r0, r6
 8000a92:	f3af 8000 	nop.w
 8000a96:	4607      	mov	r7, r0
 8000a98:	1c78      	adds	r0, r7, #1
 8000a9a:	d1d6      	bne.n	8000a4a <_vfiprintf_r+0x19a>
 8000a9c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8000a9e:	07d9      	lsls	r1, r3, #31
 8000aa0:	d405      	bmi.n	8000aae <_vfiprintf_r+0x1fe>
 8000aa2:	89ab      	ldrh	r3, [r5, #12]
 8000aa4:	059a      	lsls	r2, r3, #22
 8000aa6:	d402      	bmi.n	8000aae <_vfiprintf_r+0x1fe>
 8000aa8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8000aaa:	f7ff fed7 	bl	800085c <__retarget_lock_release_recursive>
 8000aae:	89ab      	ldrh	r3, [r5, #12]
 8000ab0:	065b      	lsls	r3, r3, #25
 8000ab2:	f53f af1f 	bmi.w	80008f4 <_vfiprintf_r+0x44>
 8000ab6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8000ab8:	e71e      	b.n	80008f8 <_vfiprintf_r+0x48>
 8000aba:	ab03      	add	r3, sp, #12
 8000abc:	9300      	str	r3, [sp, #0]
 8000abe:	462a      	mov	r2, r5
 8000ac0:	4b05      	ldr	r3, [pc, #20]	@ (8000ad8 <_vfiprintf_r+0x228>)
 8000ac2:	a904      	add	r1, sp, #16
 8000ac4:	4630      	mov	r0, r6
 8000ac6:	f000 f91b 	bl	8000d00 <_printf_i>
 8000aca:	e7e4      	b.n	8000a96 <_vfiprintf_r+0x1e6>
 8000acc:	0800151f 	.word	0x0800151f
 8000ad0:	08001529 	.word	0x08001529
 8000ad4:	00000000 	.word	0x00000000
 8000ad8:	0800088d 	.word	0x0800088d
 8000adc:	08001525 	.word	0x08001525

08000ae0 <sbrk_aligned>:
 8000ae0:	b570      	push	{r4, r5, r6, lr}
 8000ae2:	4e0f      	ldr	r6, [pc, #60]	@ (8000b20 <sbrk_aligned+0x40>)
 8000ae4:	460c      	mov	r4, r1
 8000ae6:	6831      	ldr	r1, [r6, #0]
 8000ae8:	4605      	mov	r5, r0
 8000aea:	b911      	cbnz	r1, 8000af2 <sbrk_aligned+0x12>
 8000aec:	f000 fc70 	bl	80013d0 <_sbrk_r>
 8000af0:	6030      	str	r0, [r6, #0]
 8000af2:	4621      	mov	r1, r4
 8000af4:	4628      	mov	r0, r5
 8000af6:	f000 fc6b 	bl	80013d0 <_sbrk_r>
 8000afa:	1c43      	adds	r3, r0, #1
 8000afc:	d103      	bne.n	8000b06 <sbrk_aligned+0x26>
 8000afe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8000b02:	4620      	mov	r0, r4
 8000b04:	bd70      	pop	{r4, r5, r6, pc}
 8000b06:	1cc4      	adds	r4, r0, #3
 8000b08:	f024 0403 	bic.w	r4, r4, #3
 8000b0c:	42a0      	cmp	r0, r4
 8000b0e:	d0f8      	beq.n	8000b02 <sbrk_aligned+0x22>
 8000b10:	1a21      	subs	r1, r4, r0
 8000b12:	4628      	mov	r0, r5
 8000b14:	f000 fc5c 	bl	80013d0 <_sbrk_r>
 8000b18:	3001      	adds	r0, #1
 8000b1a:	d1f2      	bne.n	8000b02 <sbrk_aligned+0x22>
 8000b1c:	e7ef      	b.n	8000afe <sbrk_aligned+0x1e>
 8000b1e:	bf00      	nop
 8000b20:	200001bc 	.word	0x200001bc

08000b24 <_malloc_r>:
 8000b24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000b28:	1ccd      	adds	r5, r1, #3
 8000b2a:	f025 0503 	bic.w	r5, r5, #3
 8000b2e:	3508      	adds	r5, #8
 8000b30:	2d0c      	cmp	r5, #12
 8000b32:	bf38      	it	cc
 8000b34:	250c      	movcc	r5, #12
 8000b36:	2d00      	cmp	r5, #0
 8000b38:	4606      	mov	r6, r0
 8000b3a:	db01      	blt.n	8000b40 <_malloc_r+0x1c>
 8000b3c:	42a9      	cmp	r1, r5
 8000b3e:	d904      	bls.n	8000b4a <_malloc_r+0x26>
 8000b40:	230c      	movs	r3, #12
 8000b42:	6033      	str	r3, [r6, #0]
 8000b44:	2000      	movs	r0, #0
 8000b46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000b4a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8000c20 <_malloc_r+0xfc>
 8000b4e:	f000 faa3 	bl	8001098 <__malloc_lock>
 8000b52:	f8d8 3000 	ldr.w	r3, [r8]
 8000b56:	461c      	mov	r4, r3
 8000b58:	bb44      	cbnz	r4, 8000bac <_malloc_r+0x88>
 8000b5a:	4629      	mov	r1, r5
 8000b5c:	4630      	mov	r0, r6
 8000b5e:	f7ff ffbf 	bl	8000ae0 <sbrk_aligned>
 8000b62:	1c43      	adds	r3, r0, #1
 8000b64:	4604      	mov	r4, r0
 8000b66:	d158      	bne.n	8000c1a <_malloc_r+0xf6>
 8000b68:	f8d8 4000 	ldr.w	r4, [r8]
 8000b6c:	4627      	mov	r7, r4
 8000b6e:	2f00      	cmp	r7, #0
 8000b70:	d143      	bne.n	8000bfa <_malloc_r+0xd6>
 8000b72:	2c00      	cmp	r4, #0
 8000b74:	d04b      	beq.n	8000c0e <_malloc_r+0xea>
 8000b76:	6823      	ldr	r3, [r4, #0]
 8000b78:	4639      	mov	r1, r7
 8000b7a:	4630      	mov	r0, r6
 8000b7c:	eb04 0903 	add.w	r9, r4, r3
 8000b80:	f000 fc26 	bl	80013d0 <_sbrk_r>
 8000b84:	4581      	cmp	r9, r0
 8000b86:	d142      	bne.n	8000c0e <_malloc_r+0xea>
 8000b88:	6821      	ldr	r1, [r4, #0]
 8000b8a:	1a6d      	subs	r5, r5, r1
 8000b8c:	4629      	mov	r1, r5
 8000b8e:	4630      	mov	r0, r6
 8000b90:	f7ff ffa6 	bl	8000ae0 <sbrk_aligned>
 8000b94:	3001      	adds	r0, #1
 8000b96:	d03a      	beq.n	8000c0e <_malloc_r+0xea>
 8000b98:	6823      	ldr	r3, [r4, #0]
 8000b9a:	442b      	add	r3, r5
 8000b9c:	6023      	str	r3, [r4, #0]
 8000b9e:	f8d8 3000 	ldr.w	r3, [r8]
 8000ba2:	685a      	ldr	r2, [r3, #4]
 8000ba4:	bb62      	cbnz	r2, 8000c00 <_malloc_r+0xdc>
 8000ba6:	f8c8 7000 	str.w	r7, [r8]
 8000baa:	e00f      	b.n	8000bcc <_malloc_r+0xa8>
 8000bac:	6822      	ldr	r2, [r4, #0]
 8000bae:	1b52      	subs	r2, r2, r5
 8000bb0:	d420      	bmi.n	8000bf4 <_malloc_r+0xd0>
 8000bb2:	2a0b      	cmp	r2, #11
 8000bb4:	d917      	bls.n	8000be6 <_malloc_r+0xc2>
 8000bb6:	1961      	adds	r1, r4, r5
 8000bb8:	42a3      	cmp	r3, r4
 8000bba:	6025      	str	r5, [r4, #0]
 8000bbc:	bf18      	it	ne
 8000bbe:	6059      	strne	r1, [r3, #4]
 8000bc0:	6863      	ldr	r3, [r4, #4]
 8000bc2:	bf08      	it	eq
 8000bc4:	f8c8 1000 	streq.w	r1, [r8]
 8000bc8:	5162      	str	r2, [r4, r5]
 8000bca:	604b      	str	r3, [r1, #4]
 8000bcc:	4630      	mov	r0, r6
 8000bce:	f000 fa69 	bl	80010a4 <__malloc_unlock>
 8000bd2:	f104 000b 	add.w	r0, r4, #11
 8000bd6:	1d23      	adds	r3, r4, #4
 8000bd8:	f020 0007 	bic.w	r0, r0, #7
 8000bdc:	1ac2      	subs	r2, r0, r3
 8000bde:	bf1c      	itt	ne
 8000be0:	1a1b      	subne	r3, r3, r0
 8000be2:	50a3      	strne	r3, [r4, r2]
 8000be4:	e7af      	b.n	8000b46 <_malloc_r+0x22>
 8000be6:	6862      	ldr	r2, [r4, #4]
 8000be8:	42a3      	cmp	r3, r4
 8000bea:	bf0c      	ite	eq
 8000bec:	f8c8 2000 	streq.w	r2, [r8]
 8000bf0:	605a      	strne	r2, [r3, #4]
 8000bf2:	e7eb      	b.n	8000bcc <_malloc_r+0xa8>
 8000bf4:	4623      	mov	r3, r4
 8000bf6:	6864      	ldr	r4, [r4, #4]
 8000bf8:	e7ae      	b.n	8000b58 <_malloc_r+0x34>
 8000bfa:	463c      	mov	r4, r7
 8000bfc:	687f      	ldr	r7, [r7, #4]
 8000bfe:	e7b6      	b.n	8000b6e <_malloc_r+0x4a>
 8000c00:	461a      	mov	r2, r3
 8000c02:	685b      	ldr	r3, [r3, #4]
 8000c04:	42a3      	cmp	r3, r4
 8000c06:	d1fb      	bne.n	8000c00 <_malloc_r+0xdc>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	6053      	str	r3, [r2, #4]
 8000c0c:	e7de      	b.n	8000bcc <_malloc_r+0xa8>
 8000c0e:	230c      	movs	r3, #12
 8000c10:	6033      	str	r3, [r6, #0]
 8000c12:	4630      	mov	r0, r6
 8000c14:	f000 fa46 	bl	80010a4 <__malloc_unlock>
 8000c18:	e794      	b.n	8000b44 <_malloc_r+0x20>
 8000c1a:	6005      	str	r5, [r0, #0]
 8000c1c:	e7d6      	b.n	8000bcc <_malloc_r+0xa8>
 8000c1e:	bf00      	nop
 8000c20:	200001c0 	.word	0x200001c0

08000c24 <_printf_common>:
 8000c24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c28:	4616      	mov	r6, r2
 8000c2a:	4698      	mov	r8, r3
 8000c2c:	688a      	ldr	r2, [r1, #8]
 8000c2e:	690b      	ldr	r3, [r1, #16]
 8000c30:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8000c34:	4293      	cmp	r3, r2
 8000c36:	bfb8      	it	lt
 8000c38:	4613      	movlt	r3, r2
 8000c3a:	6033      	str	r3, [r6, #0]
 8000c3c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8000c40:	4607      	mov	r7, r0
 8000c42:	460c      	mov	r4, r1
 8000c44:	b10a      	cbz	r2, 8000c4a <_printf_common+0x26>
 8000c46:	3301      	adds	r3, #1
 8000c48:	6033      	str	r3, [r6, #0]
 8000c4a:	6823      	ldr	r3, [r4, #0]
 8000c4c:	0699      	lsls	r1, r3, #26
 8000c4e:	bf42      	ittt	mi
 8000c50:	6833      	ldrmi	r3, [r6, #0]
 8000c52:	3302      	addmi	r3, #2
 8000c54:	6033      	strmi	r3, [r6, #0]
 8000c56:	6825      	ldr	r5, [r4, #0]
 8000c58:	f015 0506 	ands.w	r5, r5, #6
 8000c5c:	d106      	bne.n	8000c6c <_printf_common+0x48>
 8000c5e:	f104 0a19 	add.w	sl, r4, #25
 8000c62:	68e3      	ldr	r3, [r4, #12]
 8000c64:	6832      	ldr	r2, [r6, #0]
 8000c66:	1a9b      	subs	r3, r3, r2
 8000c68:	42ab      	cmp	r3, r5
 8000c6a:	dc26      	bgt.n	8000cba <_printf_common+0x96>
 8000c6c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8000c70:	6822      	ldr	r2, [r4, #0]
 8000c72:	3b00      	subs	r3, #0
 8000c74:	bf18      	it	ne
 8000c76:	2301      	movne	r3, #1
 8000c78:	0692      	lsls	r2, r2, #26
 8000c7a:	d42b      	bmi.n	8000cd4 <_printf_common+0xb0>
 8000c7c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8000c80:	4641      	mov	r1, r8
 8000c82:	4638      	mov	r0, r7
 8000c84:	47c8      	blx	r9
 8000c86:	3001      	adds	r0, #1
 8000c88:	d01e      	beq.n	8000cc8 <_printf_common+0xa4>
 8000c8a:	6823      	ldr	r3, [r4, #0]
 8000c8c:	6922      	ldr	r2, [r4, #16]
 8000c8e:	f003 0306 	and.w	r3, r3, #6
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf02      	ittt	eq
 8000c96:	68e5      	ldreq	r5, [r4, #12]
 8000c98:	6833      	ldreq	r3, [r6, #0]
 8000c9a:	1aed      	subeq	r5, r5, r3
 8000c9c:	68a3      	ldr	r3, [r4, #8]
 8000c9e:	bf0c      	ite	eq
 8000ca0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000ca4:	2500      	movne	r5, #0
 8000ca6:	4293      	cmp	r3, r2
 8000ca8:	bfc4      	itt	gt
 8000caa:	1a9b      	subgt	r3, r3, r2
 8000cac:	18ed      	addgt	r5, r5, r3
 8000cae:	2600      	movs	r6, #0
 8000cb0:	341a      	adds	r4, #26
 8000cb2:	42b5      	cmp	r5, r6
 8000cb4:	d11a      	bne.n	8000cec <_printf_common+0xc8>
 8000cb6:	2000      	movs	r0, #0
 8000cb8:	e008      	b.n	8000ccc <_printf_common+0xa8>
 8000cba:	2301      	movs	r3, #1
 8000cbc:	4652      	mov	r2, sl
 8000cbe:	4641      	mov	r1, r8
 8000cc0:	4638      	mov	r0, r7
 8000cc2:	47c8      	blx	r9
 8000cc4:	3001      	adds	r0, #1
 8000cc6:	d103      	bne.n	8000cd0 <_printf_common+0xac>
 8000cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd0:	3501      	adds	r5, #1
 8000cd2:	e7c6      	b.n	8000c62 <_printf_common+0x3e>
 8000cd4:	18e1      	adds	r1, r4, r3
 8000cd6:	1c5a      	adds	r2, r3, #1
 8000cd8:	2030      	movs	r0, #48	@ 0x30
 8000cda:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8000cde:	4422      	add	r2, r4
 8000ce0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8000ce4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8000ce8:	3302      	adds	r3, #2
 8000cea:	e7c7      	b.n	8000c7c <_printf_common+0x58>
 8000cec:	2301      	movs	r3, #1
 8000cee:	4622      	mov	r2, r4
 8000cf0:	4641      	mov	r1, r8
 8000cf2:	4638      	mov	r0, r7
 8000cf4:	47c8      	blx	r9
 8000cf6:	3001      	adds	r0, #1
 8000cf8:	d0e6      	beq.n	8000cc8 <_printf_common+0xa4>
 8000cfa:	3601      	adds	r6, #1
 8000cfc:	e7d9      	b.n	8000cb2 <_printf_common+0x8e>
	...

08000d00 <_printf_i>:
 8000d00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000d04:	7e0f      	ldrb	r7, [r1, #24]
 8000d06:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8000d08:	2f78      	cmp	r7, #120	@ 0x78
 8000d0a:	4691      	mov	r9, r2
 8000d0c:	4680      	mov	r8, r0
 8000d0e:	460c      	mov	r4, r1
 8000d10:	469a      	mov	sl, r3
 8000d12:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8000d16:	d807      	bhi.n	8000d28 <_printf_i+0x28>
 8000d18:	2f62      	cmp	r7, #98	@ 0x62
 8000d1a:	d80a      	bhi.n	8000d32 <_printf_i+0x32>
 8000d1c:	2f00      	cmp	r7, #0
 8000d1e:	f000 80d2 	beq.w	8000ec6 <_printf_i+0x1c6>
 8000d22:	2f58      	cmp	r7, #88	@ 0x58
 8000d24:	f000 80b9 	beq.w	8000e9a <_printf_i+0x19a>
 8000d28:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000d2c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8000d30:	e03a      	b.n	8000da8 <_printf_i+0xa8>
 8000d32:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8000d36:	2b15      	cmp	r3, #21
 8000d38:	d8f6      	bhi.n	8000d28 <_printf_i+0x28>
 8000d3a:	a101      	add	r1, pc, #4	@ (adr r1, 8000d40 <_printf_i+0x40>)
 8000d3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000d40:	08000d99 	.word	0x08000d99
 8000d44:	08000dad 	.word	0x08000dad
 8000d48:	08000d29 	.word	0x08000d29
 8000d4c:	08000d29 	.word	0x08000d29
 8000d50:	08000d29 	.word	0x08000d29
 8000d54:	08000d29 	.word	0x08000d29
 8000d58:	08000dad 	.word	0x08000dad
 8000d5c:	08000d29 	.word	0x08000d29
 8000d60:	08000d29 	.word	0x08000d29
 8000d64:	08000d29 	.word	0x08000d29
 8000d68:	08000d29 	.word	0x08000d29
 8000d6c:	08000ead 	.word	0x08000ead
 8000d70:	08000dd7 	.word	0x08000dd7
 8000d74:	08000e67 	.word	0x08000e67
 8000d78:	08000d29 	.word	0x08000d29
 8000d7c:	08000d29 	.word	0x08000d29
 8000d80:	08000ecf 	.word	0x08000ecf
 8000d84:	08000d29 	.word	0x08000d29
 8000d88:	08000dd7 	.word	0x08000dd7
 8000d8c:	08000d29 	.word	0x08000d29
 8000d90:	08000d29 	.word	0x08000d29
 8000d94:	08000e6f 	.word	0x08000e6f
 8000d98:	6833      	ldr	r3, [r6, #0]
 8000d9a:	1d1a      	adds	r2, r3, #4
 8000d9c:	681b      	ldr	r3, [r3, #0]
 8000d9e:	6032      	str	r2, [r6, #0]
 8000da0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8000da4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8000da8:	2301      	movs	r3, #1
 8000daa:	e09d      	b.n	8000ee8 <_printf_i+0x1e8>
 8000dac:	6833      	ldr	r3, [r6, #0]
 8000dae:	6820      	ldr	r0, [r4, #0]
 8000db0:	1d19      	adds	r1, r3, #4
 8000db2:	6031      	str	r1, [r6, #0]
 8000db4:	0606      	lsls	r6, r0, #24
 8000db6:	d501      	bpl.n	8000dbc <_printf_i+0xbc>
 8000db8:	681d      	ldr	r5, [r3, #0]
 8000dba:	e003      	b.n	8000dc4 <_printf_i+0xc4>
 8000dbc:	0645      	lsls	r5, r0, #25
 8000dbe:	d5fb      	bpl.n	8000db8 <_printf_i+0xb8>
 8000dc0:	f9b3 5000 	ldrsh.w	r5, [r3]
 8000dc4:	2d00      	cmp	r5, #0
 8000dc6:	da03      	bge.n	8000dd0 <_printf_i+0xd0>
 8000dc8:	232d      	movs	r3, #45	@ 0x2d
 8000dca:	426d      	negs	r5, r5
 8000dcc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000dd0:	4859      	ldr	r0, [pc, #356]	@ (8000f38 <_printf_i+0x238>)
 8000dd2:	230a      	movs	r3, #10
 8000dd4:	e011      	b.n	8000dfa <_printf_i+0xfa>
 8000dd6:	6821      	ldr	r1, [r4, #0]
 8000dd8:	6833      	ldr	r3, [r6, #0]
 8000dda:	0608      	lsls	r0, r1, #24
 8000ddc:	f853 5b04 	ldr.w	r5, [r3], #4
 8000de0:	d402      	bmi.n	8000de8 <_printf_i+0xe8>
 8000de2:	0649      	lsls	r1, r1, #25
 8000de4:	bf48      	it	mi
 8000de6:	b2ad      	uxthmi	r5, r5
 8000de8:	2f6f      	cmp	r7, #111	@ 0x6f
 8000dea:	4853      	ldr	r0, [pc, #332]	@ (8000f38 <_printf_i+0x238>)
 8000dec:	6033      	str	r3, [r6, #0]
 8000dee:	bf14      	ite	ne
 8000df0:	230a      	movne	r3, #10
 8000df2:	2308      	moveq	r3, #8
 8000df4:	2100      	movs	r1, #0
 8000df6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8000dfa:	6866      	ldr	r6, [r4, #4]
 8000dfc:	60a6      	str	r6, [r4, #8]
 8000dfe:	2e00      	cmp	r6, #0
 8000e00:	bfa2      	ittt	ge
 8000e02:	6821      	ldrge	r1, [r4, #0]
 8000e04:	f021 0104 	bicge.w	r1, r1, #4
 8000e08:	6021      	strge	r1, [r4, #0]
 8000e0a:	b90d      	cbnz	r5, 8000e10 <_printf_i+0x110>
 8000e0c:	2e00      	cmp	r6, #0
 8000e0e:	d04b      	beq.n	8000ea8 <_printf_i+0x1a8>
 8000e10:	4616      	mov	r6, r2
 8000e12:	fbb5 f1f3 	udiv	r1, r5, r3
 8000e16:	fb03 5711 	mls	r7, r3, r1, r5
 8000e1a:	5dc7      	ldrb	r7, [r0, r7]
 8000e1c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8000e20:	462f      	mov	r7, r5
 8000e22:	42bb      	cmp	r3, r7
 8000e24:	460d      	mov	r5, r1
 8000e26:	d9f4      	bls.n	8000e12 <_printf_i+0x112>
 8000e28:	2b08      	cmp	r3, #8
 8000e2a:	d10b      	bne.n	8000e44 <_printf_i+0x144>
 8000e2c:	6823      	ldr	r3, [r4, #0]
 8000e2e:	07df      	lsls	r7, r3, #31
 8000e30:	d508      	bpl.n	8000e44 <_printf_i+0x144>
 8000e32:	6923      	ldr	r3, [r4, #16]
 8000e34:	6861      	ldr	r1, [r4, #4]
 8000e36:	4299      	cmp	r1, r3
 8000e38:	bfde      	ittt	le
 8000e3a:	2330      	movle	r3, #48	@ 0x30
 8000e3c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8000e40:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8000e44:	1b92      	subs	r2, r2, r6
 8000e46:	6122      	str	r2, [r4, #16]
 8000e48:	f8cd a000 	str.w	sl, [sp]
 8000e4c:	464b      	mov	r3, r9
 8000e4e:	aa03      	add	r2, sp, #12
 8000e50:	4621      	mov	r1, r4
 8000e52:	4640      	mov	r0, r8
 8000e54:	f7ff fee6 	bl	8000c24 <_printf_common>
 8000e58:	3001      	adds	r0, #1
 8000e5a:	d14a      	bne.n	8000ef2 <_printf_i+0x1f2>
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e60:	b004      	add	sp, #16
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	f043 0320 	orr.w	r3, r3, #32
 8000e6c:	6023      	str	r3, [r4, #0]
 8000e6e:	4833      	ldr	r0, [pc, #204]	@ (8000f3c <_printf_i+0x23c>)
 8000e70:	2778      	movs	r7, #120	@ 0x78
 8000e72:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8000e76:	6823      	ldr	r3, [r4, #0]
 8000e78:	6831      	ldr	r1, [r6, #0]
 8000e7a:	061f      	lsls	r7, r3, #24
 8000e7c:	f851 5b04 	ldr.w	r5, [r1], #4
 8000e80:	d402      	bmi.n	8000e88 <_printf_i+0x188>
 8000e82:	065f      	lsls	r7, r3, #25
 8000e84:	bf48      	it	mi
 8000e86:	b2ad      	uxthmi	r5, r5
 8000e88:	6031      	str	r1, [r6, #0]
 8000e8a:	07d9      	lsls	r1, r3, #31
 8000e8c:	bf44      	itt	mi
 8000e8e:	f043 0320 	orrmi.w	r3, r3, #32
 8000e92:	6023      	strmi	r3, [r4, #0]
 8000e94:	b11d      	cbz	r5, 8000e9e <_printf_i+0x19e>
 8000e96:	2310      	movs	r3, #16
 8000e98:	e7ac      	b.n	8000df4 <_printf_i+0xf4>
 8000e9a:	4827      	ldr	r0, [pc, #156]	@ (8000f38 <_printf_i+0x238>)
 8000e9c:	e7e9      	b.n	8000e72 <_printf_i+0x172>
 8000e9e:	6823      	ldr	r3, [r4, #0]
 8000ea0:	f023 0320 	bic.w	r3, r3, #32
 8000ea4:	6023      	str	r3, [r4, #0]
 8000ea6:	e7f6      	b.n	8000e96 <_printf_i+0x196>
 8000ea8:	4616      	mov	r6, r2
 8000eaa:	e7bd      	b.n	8000e28 <_printf_i+0x128>
 8000eac:	6833      	ldr	r3, [r6, #0]
 8000eae:	6825      	ldr	r5, [r4, #0]
 8000eb0:	6961      	ldr	r1, [r4, #20]
 8000eb2:	1d18      	adds	r0, r3, #4
 8000eb4:	6030      	str	r0, [r6, #0]
 8000eb6:	062e      	lsls	r6, r5, #24
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	d501      	bpl.n	8000ec0 <_printf_i+0x1c0>
 8000ebc:	6019      	str	r1, [r3, #0]
 8000ebe:	e002      	b.n	8000ec6 <_printf_i+0x1c6>
 8000ec0:	0668      	lsls	r0, r5, #25
 8000ec2:	d5fb      	bpl.n	8000ebc <_printf_i+0x1bc>
 8000ec4:	8019      	strh	r1, [r3, #0]
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	6123      	str	r3, [r4, #16]
 8000eca:	4616      	mov	r6, r2
 8000ecc:	e7bc      	b.n	8000e48 <_printf_i+0x148>
 8000ece:	6833      	ldr	r3, [r6, #0]
 8000ed0:	1d1a      	adds	r2, r3, #4
 8000ed2:	6032      	str	r2, [r6, #0]
 8000ed4:	681e      	ldr	r6, [r3, #0]
 8000ed6:	6862      	ldr	r2, [r4, #4]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4630      	mov	r0, r6
 8000edc:	f7ff f980 	bl	80001e0 <memchr>
 8000ee0:	b108      	cbz	r0, 8000ee6 <_printf_i+0x1e6>
 8000ee2:	1b80      	subs	r0, r0, r6
 8000ee4:	6060      	str	r0, [r4, #4]
 8000ee6:	6863      	ldr	r3, [r4, #4]
 8000ee8:	6123      	str	r3, [r4, #16]
 8000eea:	2300      	movs	r3, #0
 8000eec:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8000ef0:	e7aa      	b.n	8000e48 <_printf_i+0x148>
 8000ef2:	6923      	ldr	r3, [r4, #16]
 8000ef4:	4632      	mov	r2, r6
 8000ef6:	4649      	mov	r1, r9
 8000ef8:	4640      	mov	r0, r8
 8000efa:	47d0      	blx	sl
 8000efc:	3001      	adds	r0, #1
 8000efe:	d0ad      	beq.n	8000e5c <_printf_i+0x15c>
 8000f00:	6823      	ldr	r3, [r4, #0]
 8000f02:	079b      	lsls	r3, r3, #30
 8000f04:	d413      	bmi.n	8000f2e <_printf_i+0x22e>
 8000f06:	68e0      	ldr	r0, [r4, #12]
 8000f08:	9b03      	ldr	r3, [sp, #12]
 8000f0a:	4298      	cmp	r0, r3
 8000f0c:	bfb8      	it	lt
 8000f0e:	4618      	movlt	r0, r3
 8000f10:	e7a6      	b.n	8000e60 <_printf_i+0x160>
 8000f12:	2301      	movs	r3, #1
 8000f14:	4632      	mov	r2, r6
 8000f16:	4649      	mov	r1, r9
 8000f18:	4640      	mov	r0, r8
 8000f1a:	47d0      	blx	sl
 8000f1c:	3001      	adds	r0, #1
 8000f1e:	d09d      	beq.n	8000e5c <_printf_i+0x15c>
 8000f20:	3501      	adds	r5, #1
 8000f22:	68e3      	ldr	r3, [r4, #12]
 8000f24:	9903      	ldr	r1, [sp, #12]
 8000f26:	1a5b      	subs	r3, r3, r1
 8000f28:	42ab      	cmp	r3, r5
 8000f2a:	dcf2      	bgt.n	8000f12 <_printf_i+0x212>
 8000f2c:	e7eb      	b.n	8000f06 <_printf_i+0x206>
 8000f2e:	2500      	movs	r5, #0
 8000f30:	f104 0619 	add.w	r6, r4, #25
 8000f34:	e7f5      	b.n	8000f22 <_printf_i+0x222>
 8000f36:	bf00      	nop
 8000f38:	08001530 	.word	0x08001530
 8000f3c:	08001541 	.word	0x08001541

08000f40 <__sflush_r>:
 8000f40:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8000f44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000f48:	0716      	lsls	r6, r2, #28
 8000f4a:	4605      	mov	r5, r0
 8000f4c:	460c      	mov	r4, r1
 8000f4e:	d454      	bmi.n	8000ffa <__sflush_r+0xba>
 8000f50:	684b      	ldr	r3, [r1, #4]
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	dc02      	bgt.n	8000f5c <__sflush_r+0x1c>
 8000f56:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	dd48      	ble.n	8000fee <__sflush_r+0xae>
 8000f5c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f5e:	2e00      	cmp	r6, #0
 8000f60:	d045      	beq.n	8000fee <__sflush_r+0xae>
 8000f62:	2300      	movs	r3, #0
 8000f64:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8000f68:	682f      	ldr	r7, [r5, #0]
 8000f6a:	6a21      	ldr	r1, [r4, #32]
 8000f6c:	602b      	str	r3, [r5, #0]
 8000f6e:	d030      	beq.n	8000fd2 <__sflush_r+0x92>
 8000f70:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8000f72:	89a3      	ldrh	r3, [r4, #12]
 8000f74:	0759      	lsls	r1, r3, #29
 8000f76:	d505      	bpl.n	8000f84 <__sflush_r+0x44>
 8000f78:	6863      	ldr	r3, [r4, #4]
 8000f7a:	1ad2      	subs	r2, r2, r3
 8000f7c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8000f7e:	b10b      	cbz	r3, 8000f84 <__sflush_r+0x44>
 8000f80:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8000f82:	1ad2      	subs	r2, r2, r3
 8000f84:	2300      	movs	r3, #0
 8000f86:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8000f88:	6a21      	ldr	r1, [r4, #32]
 8000f8a:	4628      	mov	r0, r5
 8000f8c:	47b0      	blx	r6
 8000f8e:	1c43      	adds	r3, r0, #1
 8000f90:	89a3      	ldrh	r3, [r4, #12]
 8000f92:	d106      	bne.n	8000fa2 <__sflush_r+0x62>
 8000f94:	6829      	ldr	r1, [r5, #0]
 8000f96:	291d      	cmp	r1, #29
 8000f98:	d82b      	bhi.n	8000ff2 <__sflush_r+0xb2>
 8000f9a:	4a2a      	ldr	r2, [pc, #168]	@ (8001044 <__sflush_r+0x104>)
 8000f9c:	410a      	asrs	r2, r1
 8000f9e:	07d6      	lsls	r6, r2, #31
 8000fa0:	d427      	bmi.n	8000ff2 <__sflush_r+0xb2>
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	6062      	str	r2, [r4, #4]
 8000fa6:	04d9      	lsls	r1, r3, #19
 8000fa8:	6922      	ldr	r2, [r4, #16]
 8000faa:	6022      	str	r2, [r4, #0]
 8000fac:	d504      	bpl.n	8000fb8 <__sflush_r+0x78>
 8000fae:	1c42      	adds	r2, r0, #1
 8000fb0:	d101      	bne.n	8000fb6 <__sflush_r+0x76>
 8000fb2:	682b      	ldr	r3, [r5, #0]
 8000fb4:	b903      	cbnz	r3, 8000fb8 <__sflush_r+0x78>
 8000fb6:	6560      	str	r0, [r4, #84]	@ 0x54
 8000fb8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8000fba:	602f      	str	r7, [r5, #0]
 8000fbc:	b1b9      	cbz	r1, 8000fee <__sflush_r+0xae>
 8000fbe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8000fc2:	4299      	cmp	r1, r3
 8000fc4:	d002      	beq.n	8000fcc <__sflush_r+0x8c>
 8000fc6:	4628      	mov	r0, r5
 8000fc8:	f000 fa24 	bl	8001414 <_free_r>
 8000fcc:	2300      	movs	r3, #0
 8000fce:	6363      	str	r3, [r4, #52]	@ 0x34
 8000fd0:	e00d      	b.n	8000fee <__sflush_r+0xae>
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	4628      	mov	r0, r5
 8000fd6:	47b0      	blx	r6
 8000fd8:	4602      	mov	r2, r0
 8000fda:	1c50      	adds	r0, r2, #1
 8000fdc:	d1c9      	bne.n	8000f72 <__sflush_r+0x32>
 8000fde:	682b      	ldr	r3, [r5, #0]
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d0c6      	beq.n	8000f72 <__sflush_r+0x32>
 8000fe4:	2b1d      	cmp	r3, #29
 8000fe6:	d001      	beq.n	8000fec <__sflush_r+0xac>
 8000fe8:	2b16      	cmp	r3, #22
 8000fea:	d11e      	bne.n	800102a <__sflush_r+0xea>
 8000fec:	602f      	str	r7, [r5, #0]
 8000fee:	2000      	movs	r0, #0
 8000ff0:	e022      	b.n	8001038 <__sflush_r+0xf8>
 8000ff2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000ff6:	b21b      	sxth	r3, r3
 8000ff8:	e01b      	b.n	8001032 <__sflush_r+0xf2>
 8000ffa:	690f      	ldr	r7, [r1, #16]
 8000ffc:	2f00      	cmp	r7, #0
 8000ffe:	d0f6      	beq.n	8000fee <__sflush_r+0xae>
 8001000:	0793      	lsls	r3, r2, #30
 8001002:	680e      	ldr	r6, [r1, #0]
 8001004:	bf08      	it	eq
 8001006:	694b      	ldreq	r3, [r1, #20]
 8001008:	600f      	str	r7, [r1, #0]
 800100a:	bf18      	it	ne
 800100c:	2300      	movne	r3, #0
 800100e:	eba6 0807 	sub.w	r8, r6, r7
 8001012:	608b      	str	r3, [r1, #8]
 8001014:	f1b8 0f00 	cmp.w	r8, #0
 8001018:	dde9      	ble.n	8000fee <__sflush_r+0xae>
 800101a:	6a21      	ldr	r1, [r4, #32]
 800101c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800101e:	4643      	mov	r3, r8
 8001020:	463a      	mov	r2, r7
 8001022:	4628      	mov	r0, r5
 8001024:	47b0      	blx	r6
 8001026:	2800      	cmp	r0, #0
 8001028:	dc08      	bgt.n	800103c <__sflush_r+0xfc>
 800102a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800102e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001032:	81a3      	strh	r3, [r4, #12]
 8001034:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800103c:	4407      	add	r7, r0
 800103e:	eba8 0800 	sub.w	r8, r8, r0
 8001042:	e7e7      	b.n	8001014 <__sflush_r+0xd4>
 8001044:	dfbffffe 	.word	0xdfbffffe

08001048 <_fflush_r>:
 8001048:	b538      	push	{r3, r4, r5, lr}
 800104a:	690b      	ldr	r3, [r1, #16]
 800104c:	4605      	mov	r5, r0
 800104e:	460c      	mov	r4, r1
 8001050:	b913      	cbnz	r3, 8001058 <_fflush_r+0x10>
 8001052:	2500      	movs	r5, #0
 8001054:	4628      	mov	r0, r5
 8001056:	bd38      	pop	{r3, r4, r5, pc}
 8001058:	b118      	cbz	r0, 8001062 <_fflush_r+0x1a>
 800105a:	6a03      	ldr	r3, [r0, #32]
 800105c:	b90b      	cbnz	r3, 8001062 <_fflush_r+0x1a>
 800105e:	f7ff fb81 	bl	8000764 <__sinit>
 8001062:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f3      	beq.n	8001052 <_fflush_r+0xa>
 800106a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800106c:	07d0      	lsls	r0, r2, #31
 800106e:	d404      	bmi.n	800107a <_fflush_r+0x32>
 8001070:	0599      	lsls	r1, r3, #22
 8001072:	d402      	bmi.n	800107a <_fflush_r+0x32>
 8001074:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001076:	f7ff fbf0 	bl	800085a <__retarget_lock_acquire_recursive>
 800107a:	4628      	mov	r0, r5
 800107c:	4621      	mov	r1, r4
 800107e:	f7ff ff5f 	bl	8000f40 <__sflush_r>
 8001082:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8001084:	07da      	lsls	r2, r3, #31
 8001086:	4605      	mov	r5, r0
 8001088:	d4e4      	bmi.n	8001054 <_fflush_r+0xc>
 800108a:	89a3      	ldrh	r3, [r4, #12]
 800108c:	059b      	lsls	r3, r3, #22
 800108e:	d4e1      	bmi.n	8001054 <_fflush_r+0xc>
 8001090:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8001092:	f7ff fbe3 	bl	800085c <__retarget_lock_release_recursive>
 8001096:	e7dd      	b.n	8001054 <_fflush_r+0xc>

08001098 <__malloc_lock>:
 8001098:	4801      	ldr	r0, [pc, #4]	@ (80010a0 <__malloc_lock+0x8>)
 800109a:	f7ff bbde 	b.w	800085a <__retarget_lock_acquire_recursive>
 800109e:	bf00      	nop
 80010a0:	200001b8 	.word	0x200001b8

080010a4 <__malloc_unlock>:
 80010a4:	4801      	ldr	r0, [pc, #4]	@ (80010ac <__malloc_unlock+0x8>)
 80010a6:	f7ff bbd9 	b.w	800085c <__retarget_lock_release_recursive>
 80010aa:	bf00      	nop
 80010ac:	200001b8 	.word	0x200001b8

080010b0 <__sread>:
 80010b0:	b510      	push	{r4, lr}
 80010b2:	460c      	mov	r4, r1
 80010b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010b8:	f000 f978 	bl	80013ac <_read_r>
 80010bc:	2800      	cmp	r0, #0
 80010be:	bfab      	itete	ge
 80010c0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80010c2:	89a3      	ldrhlt	r3, [r4, #12]
 80010c4:	181b      	addge	r3, r3, r0
 80010c6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80010ca:	bfac      	ite	ge
 80010cc:	6563      	strge	r3, [r4, #84]	@ 0x54
 80010ce:	81a3      	strhlt	r3, [r4, #12]
 80010d0:	bd10      	pop	{r4, pc}

080010d2 <__swrite>:
 80010d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80010d6:	461f      	mov	r7, r3
 80010d8:	898b      	ldrh	r3, [r1, #12]
 80010da:	05db      	lsls	r3, r3, #23
 80010dc:	4605      	mov	r5, r0
 80010de:	460c      	mov	r4, r1
 80010e0:	4616      	mov	r6, r2
 80010e2:	d505      	bpl.n	80010f0 <__swrite+0x1e>
 80010e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010e8:	2302      	movs	r3, #2
 80010ea:	2200      	movs	r2, #0
 80010ec:	f000 f94c 	bl	8001388 <_lseek_r>
 80010f0:	89a3      	ldrh	r3, [r4, #12]
 80010f2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80010f6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80010fa:	81a3      	strh	r3, [r4, #12]
 80010fc:	4632      	mov	r2, r6
 80010fe:	463b      	mov	r3, r7
 8001100:	4628      	mov	r0, r5
 8001102:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001106:	f000 b973 	b.w	80013f0 <_write_r>

0800110a <__sseek>:
 800110a:	b510      	push	{r4, lr}
 800110c:	460c      	mov	r4, r1
 800110e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001112:	f000 f939 	bl	8001388 <_lseek_r>
 8001116:	1c43      	adds	r3, r0, #1
 8001118:	89a3      	ldrh	r3, [r4, #12]
 800111a:	bf15      	itete	ne
 800111c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800111e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8001122:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8001126:	81a3      	strheq	r3, [r4, #12]
 8001128:	bf18      	it	ne
 800112a:	81a3      	strhne	r3, [r4, #12]
 800112c:	bd10      	pop	{r4, pc}

0800112e <__sclose>:
 800112e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001132:	f000 b8f7 	b.w	8001324 <_close_r>

08001136 <__swbuf_r>:
 8001136:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001138:	460e      	mov	r6, r1
 800113a:	4614      	mov	r4, r2
 800113c:	4605      	mov	r5, r0
 800113e:	b118      	cbz	r0, 8001148 <__swbuf_r+0x12>
 8001140:	6a03      	ldr	r3, [r0, #32]
 8001142:	b90b      	cbnz	r3, 8001148 <__swbuf_r+0x12>
 8001144:	f7ff fb0e 	bl	8000764 <__sinit>
 8001148:	69a3      	ldr	r3, [r4, #24]
 800114a:	60a3      	str	r3, [r4, #8]
 800114c:	89a3      	ldrh	r3, [r4, #12]
 800114e:	071a      	lsls	r2, r3, #28
 8001150:	d501      	bpl.n	8001156 <__swbuf_r+0x20>
 8001152:	6923      	ldr	r3, [r4, #16]
 8001154:	b943      	cbnz	r3, 8001168 <__swbuf_r+0x32>
 8001156:	4621      	mov	r1, r4
 8001158:	4628      	mov	r0, r5
 800115a:	f000 f82b 	bl	80011b4 <__swsetup_r>
 800115e:	b118      	cbz	r0, 8001168 <__swbuf_r+0x32>
 8001160:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8001164:	4638      	mov	r0, r7
 8001166:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001168:	6823      	ldr	r3, [r4, #0]
 800116a:	6922      	ldr	r2, [r4, #16]
 800116c:	1a98      	subs	r0, r3, r2
 800116e:	6963      	ldr	r3, [r4, #20]
 8001170:	b2f6      	uxtb	r6, r6
 8001172:	4283      	cmp	r3, r0
 8001174:	4637      	mov	r7, r6
 8001176:	dc05      	bgt.n	8001184 <__swbuf_r+0x4e>
 8001178:	4621      	mov	r1, r4
 800117a:	4628      	mov	r0, r5
 800117c:	f7ff ff64 	bl	8001048 <_fflush_r>
 8001180:	2800      	cmp	r0, #0
 8001182:	d1ed      	bne.n	8001160 <__swbuf_r+0x2a>
 8001184:	68a3      	ldr	r3, [r4, #8]
 8001186:	3b01      	subs	r3, #1
 8001188:	60a3      	str	r3, [r4, #8]
 800118a:	6823      	ldr	r3, [r4, #0]
 800118c:	1c5a      	adds	r2, r3, #1
 800118e:	6022      	str	r2, [r4, #0]
 8001190:	701e      	strb	r6, [r3, #0]
 8001192:	6962      	ldr	r2, [r4, #20]
 8001194:	1c43      	adds	r3, r0, #1
 8001196:	429a      	cmp	r2, r3
 8001198:	d004      	beq.n	80011a4 <__swbuf_r+0x6e>
 800119a:	89a3      	ldrh	r3, [r4, #12]
 800119c:	07db      	lsls	r3, r3, #31
 800119e:	d5e1      	bpl.n	8001164 <__swbuf_r+0x2e>
 80011a0:	2e0a      	cmp	r6, #10
 80011a2:	d1df      	bne.n	8001164 <__swbuf_r+0x2e>
 80011a4:	4621      	mov	r1, r4
 80011a6:	4628      	mov	r0, r5
 80011a8:	f7ff ff4e 	bl	8001048 <_fflush_r>
 80011ac:	2800      	cmp	r0, #0
 80011ae:	d0d9      	beq.n	8001164 <__swbuf_r+0x2e>
 80011b0:	e7d6      	b.n	8001160 <__swbuf_r+0x2a>
	...

080011b4 <__swsetup_r>:
 80011b4:	b538      	push	{r3, r4, r5, lr}
 80011b6:	4b29      	ldr	r3, [pc, #164]	@ (800125c <__swsetup_r+0xa8>)
 80011b8:	4605      	mov	r5, r0
 80011ba:	6818      	ldr	r0, [r3, #0]
 80011bc:	460c      	mov	r4, r1
 80011be:	b118      	cbz	r0, 80011c8 <__swsetup_r+0x14>
 80011c0:	6a03      	ldr	r3, [r0, #32]
 80011c2:	b90b      	cbnz	r3, 80011c8 <__swsetup_r+0x14>
 80011c4:	f7ff face 	bl	8000764 <__sinit>
 80011c8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80011cc:	0719      	lsls	r1, r3, #28
 80011ce:	d422      	bmi.n	8001216 <__swsetup_r+0x62>
 80011d0:	06da      	lsls	r2, r3, #27
 80011d2:	d407      	bmi.n	80011e4 <__swsetup_r+0x30>
 80011d4:	2209      	movs	r2, #9
 80011d6:	602a      	str	r2, [r5, #0]
 80011d8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80011dc:	81a3      	strh	r3, [r4, #12]
 80011de:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011e2:	e033      	b.n	800124c <__swsetup_r+0x98>
 80011e4:	0758      	lsls	r0, r3, #29
 80011e6:	d512      	bpl.n	800120e <__swsetup_r+0x5a>
 80011e8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80011ea:	b141      	cbz	r1, 80011fe <__swsetup_r+0x4a>
 80011ec:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80011f0:	4299      	cmp	r1, r3
 80011f2:	d002      	beq.n	80011fa <__swsetup_r+0x46>
 80011f4:	4628      	mov	r0, r5
 80011f6:	f000 f90d 	bl	8001414 <_free_r>
 80011fa:	2300      	movs	r3, #0
 80011fc:	6363      	str	r3, [r4, #52]	@ 0x34
 80011fe:	89a3      	ldrh	r3, [r4, #12]
 8001200:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8001204:	81a3      	strh	r3, [r4, #12]
 8001206:	2300      	movs	r3, #0
 8001208:	6063      	str	r3, [r4, #4]
 800120a:	6923      	ldr	r3, [r4, #16]
 800120c:	6023      	str	r3, [r4, #0]
 800120e:	89a3      	ldrh	r3, [r4, #12]
 8001210:	f043 0308 	orr.w	r3, r3, #8
 8001214:	81a3      	strh	r3, [r4, #12]
 8001216:	6923      	ldr	r3, [r4, #16]
 8001218:	b94b      	cbnz	r3, 800122e <__swsetup_r+0x7a>
 800121a:	89a3      	ldrh	r3, [r4, #12]
 800121c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8001220:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001224:	d003      	beq.n	800122e <__swsetup_r+0x7a>
 8001226:	4621      	mov	r1, r4
 8001228:	4628      	mov	r0, r5
 800122a:	f000 f83f 	bl	80012ac <__smakebuf_r>
 800122e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001232:	f013 0201 	ands.w	r2, r3, #1
 8001236:	d00a      	beq.n	800124e <__swsetup_r+0x9a>
 8001238:	2200      	movs	r2, #0
 800123a:	60a2      	str	r2, [r4, #8]
 800123c:	6962      	ldr	r2, [r4, #20]
 800123e:	4252      	negs	r2, r2
 8001240:	61a2      	str	r2, [r4, #24]
 8001242:	6922      	ldr	r2, [r4, #16]
 8001244:	b942      	cbnz	r2, 8001258 <__swsetup_r+0xa4>
 8001246:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800124a:	d1c5      	bne.n	80011d8 <__swsetup_r+0x24>
 800124c:	bd38      	pop	{r3, r4, r5, pc}
 800124e:	0799      	lsls	r1, r3, #30
 8001250:	bf58      	it	pl
 8001252:	6962      	ldrpl	r2, [r4, #20]
 8001254:	60a2      	str	r2, [r4, #8]
 8001256:	e7f4      	b.n	8001242 <__swsetup_r+0x8e>
 8001258:	2000      	movs	r0, #0
 800125a:	e7f7      	b.n	800124c <__swsetup_r+0x98>
 800125c:	2000000c 	.word	0x2000000c

08001260 <__swhatbuf_r>:
 8001260:	b570      	push	{r4, r5, r6, lr}
 8001262:	460c      	mov	r4, r1
 8001264:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001268:	2900      	cmp	r1, #0
 800126a:	b096      	sub	sp, #88	@ 0x58
 800126c:	4615      	mov	r5, r2
 800126e:	461e      	mov	r6, r3
 8001270:	da0d      	bge.n	800128e <__swhatbuf_r+0x2e>
 8001272:	89a3      	ldrh	r3, [r4, #12]
 8001274:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8001278:	f04f 0100 	mov.w	r1, #0
 800127c:	bf14      	ite	ne
 800127e:	2340      	movne	r3, #64	@ 0x40
 8001280:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8001284:	2000      	movs	r0, #0
 8001286:	6031      	str	r1, [r6, #0]
 8001288:	602b      	str	r3, [r5, #0]
 800128a:	b016      	add	sp, #88	@ 0x58
 800128c:	bd70      	pop	{r4, r5, r6, pc}
 800128e:	466a      	mov	r2, sp
 8001290:	f000 f858 	bl	8001344 <_fstat_r>
 8001294:	2800      	cmp	r0, #0
 8001296:	dbec      	blt.n	8001272 <__swhatbuf_r+0x12>
 8001298:	9901      	ldr	r1, [sp, #4]
 800129a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800129e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80012a2:	4259      	negs	r1, r3
 80012a4:	4159      	adcs	r1, r3
 80012a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012aa:	e7eb      	b.n	8001284 <__swhatbuf_r+0x24>

080012ac <__smakebuf_r>:
 80012ac:	898b      	ldrh	r3, [r1, #12]
 80012ae:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80012b0:	079d      	lsls	r5, r3, #30
 80012b2:	4606      	mov	r6, r0
 80012b4:	460c      	mov	r4, r1
 80012b6:	d507      	bpl.n	80012c8 <__smakebuf_r+0x1c>
 80012b8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80012bc:	6023      	str	r3, [r4, #0]
 80012be:	6123      	str	r3, [r4, #16]
 80012c0:	2301      	movs	r3, #1
 80012c2:	6163      	str	r3, [r4, #20]
 80012c4:	b003      	add	sp, #12
 80012c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80012c8:	ab01      	add	r3, sp, #4
 80012ca:	466a      	mov	r2, sp
 80012cc:	f7ff ffc8 	bl	8001260 <__swhatbuf_r>
 80012d0:	9f00      	ldr	r7, [sp, #0]
 80012d2:	4605      	mov	r5, r0
 80012d4:	4639      	mov	r1, r7
 80012d6:	4630      	mov	r0, r6
 80012d8:	f7ff fc24 	bl	8000b24 <_malloc_r>
 80012dc:	b948      	cbnz	r0, 80012f2 <__smakebuf_r+0x46>
 80012de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80012e2:	059a      	lsls	r2, r3, #22
 80012e4:	d4ee      	bmi.n	80012c4 <__smakebuf_r+0x18>
 80012e6:	f023 0303 	bic.w	r3, r3, #3
 80012ea:	f043 0302 	orr.w	r3, r3, #2
 80012ee:	81a3      	strh	r3, [r4, #12]
 80012f0:	e7e2      	b.n	80012b8 <__smakebuf_r+0xc>
 80012f2:	89a3      	ldrh	r3, [r4, #12]
 80012f4:	6020      	str	r0, [r4, #0]
 80012f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80012fa:	81a3      	strh	r3, [r4, #12]
 80012fc:	9b01      	ldr	r3, [sp, #4]
 80012fe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8001302:	b15b      	cbz	r3, 800131c <__smakebuf_r+0x70>
 8001304:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001308:	4630      	mov	r0, r6
 800130a:	f000 f82d 	bl	8001368 <_isatty_r>
 800130e:	b128      	cbz	r0, 800131c <__smakebuf_r+0x70>
 8001310:	89a3      	ldrh	r3, [r4, #12]
 8001312:	f023 0303 	bic.w	r3, r3, #3
 8001316:	f043 0301 	orr.w	r3, r3, #1
 800131a:	81a3      	strh	r3, [r4, #12]
 800131c:	89a3      	ldrh	r3, [r4, #12]
 800131e:	431d      	orrs	r5, r3
 8001320:	81a5      	strh	r5, [r4, #12]
 8001322:	e7cf      	b.n	80012c4 <__smakebuf_r+0x18>

08001324 <_close_r>:
 8001324:	b538      	push	{r3, r4, r5, lr}
 8001326:	4d06      	ldr	r5, [pc, #24]	@ (8001340 <_close_r+0x1c>)
 8001328:	2300      	movs	r3, #0
 800132a:	4604      	mov	r4, r0
 800132c:	4608      	mov	r0, r1
 800132e:	602b      	str	r3, [r5, #0]
 8001330:	f7ff f8f7 	bl	8000522 <_close>
 8001334:	1c43      	adds	r3, r0, #1
 8001336:	d102      	bne.n	800133e <_close_r+0x1a>
 8001338:	682b      	ldr	r3, [r5, #0]
 800133a:	b103      	cbz	r3, 800133e <_close_r+0x1a>
 800133c:	6023      	str	r3, [r4, #0]
 800133e:	bd38      	pop	{r3, r4, r5, pc}
 8001340:	200001c4 	.word	0x200001c4

08001344 <_fstat_r>:
 8001344:	b538      	push	{r3, r4, r5, lr}
 8001346:	4d07      	ldr	r5, [pc, #28]	@ (8001364 <_fstat_r+0x20>)
 8001348:	2300      	movs	r3, #0
 800134a:	4604      	mov	r4, r0
 800134c:	4608      	mov	r0, r1
 800134e:	4611      	mov	r1, r2
 8001350:	602b      	str	r3, [r5, #0]
 8001352:	f7ff f8f2 	bl	800053a <_fstat>
 8001356:	1c43      	adds	r3, r0, #1
 8001358:	d102      	bne.n	8001360 <_fstat_r+0x1c>
 800135a:	682b      	ldr	r3, [r5, #0]
 800135c:	b103      	cbz	r3, 8001360 <_fstat_r+0x1c>
 800135e:	6023      	str	r3, [r4, #0]
 8001360:	bd38      	pop	{r3, r4, r5, pc}
 8001362:	bf00      	nop
 8001364:	200001c4 	.word	0x200001c4

08001368 <_isatty_r>:
 8001368:	b538      	push	{r3, r4, r5, lr}
 800136a:	4d06      	ldr	r5, [pc, #24]	@ (8001384 <_isatty_r+0x1c>)
 800136c:	2300      	movs	r3, #0
 800136e:	4604      	mov	r4, r0
 8001370:	4608      	mov	r0, r1
 8001372:	602b      	str	r3, [r5, #0]
 8001374:	f7ff f8f1 	bl	800055a <_isatty>
 8001378:	1c43      	adds	r3, r0, #1
 800137a:	d102      	bne.n	8001382 <_isatty_r+0x1a>
 800137c:	682b      	ldr	r3, [r5, #0]
 800137e:	b103      	cbz	r3, 8001382 <_isatty_r+0x1a>
 8001380:	6023      	str	r3, [r4, #0]
 8001382:	bd38      	pop	{r3, r4, r5, pc}
 8001384:	200001c4 	.word	0x200001c4

08001388 <_lseek_r>:
 8001388:	b538      	push	{r3, r4, r5, lr}
 800138a:	4d07      	ldr	r5, [pc, #28]	@ (80013a8 <_lseek_r+0x20>)
 800138c:	4604      	mov	r4, r0
 800138e:	4608      	mov	r0, r1
 8001390:	4611      	mov	r1, r2
 8001392:	2200      	movs	r2, #0
 8001394:	602a      	str	r2, [r5, #0]
 8001396:	461a      	mov	r2, r3
 8001398:	f7ff f8ea 	bl	8000570 <_lseek>
 800139c:	1c43      	adds	r3, r0, #1
 800139e:	d102      	bne.n	80013a6 <_lseek_r+0x1e>
 80013a0:	682b      	ldr	r3, [r5, #0]
 80013a2:	b103      	cbz	r3, 80013a6 <_lseek_r+0x1e>
 80013a4:	6023      	str	r3, [r4, #0]
 80013a6:	bd38      	pop	{r3, r4, r5, pc}
 80013a8:	200001c4 	.word	0x200001c4

080013ac <_read_r>:
 80013ac:	b538      	push	{r3, r4, r5, lr}
 80013ae:	4d07      	ldr	r5, [pc, #28]	@ (80013cc <_read_r+0x20>)
 80013b0:	4604      	mov	r4, r0
 80013b2:	4608      	mov	r0, r1
 80013b4:	4611      	mov	r1, r2
 80013b6:	2200      	movs	r2, #0
 80013b8:	602a      	str	r2, [r5, #0]
 80013ba:	461a      	mov	r2, r3
 80013bc:	f7ff f878 	bl	80004b0 <_read>
 80013c0:	1c43      	adds	r3, r0, #1
 80013c2:	d102      	bne.n	80013ca <_read_r+0x1e>
 80013c4:	682b      	ldr	r3, [r5, #0]
 80013c6:	b103      	cbz	r3, 80013ca <_read_r+0x1e>
 80013c8:	6023      	str	r3, [r4, #0]
 80013ca:	bd38      	pop	{r3, r4, r5, pc}
 80013cc:	200001c4 	.word	0x200001c4

080013d0 <_sbrk_r>:
 80013d0:	b538      	push	{r3, r4, r5, lr}
 80013d2:	4d06      	ldr	r5, [pc, #24]	@ (80013ec <_sbrk_r+0x1c>)
 80013d4:	2300      	movs	r3, #0
 80013d6:	4604      	mov	r4, r0
 80013d8:	4608      	mov	r0, r1
 80013da:	602b      	str	r3, [r5, #0]
 80013dc:	f7ff f8d6 	bl	800058c <_sbrk>
 80013e0:	1c43      	adds	r3, r0, #1
 80013e2:	d102      	bne.n	80013ea <_sbrk_r+0x1a>
 80013e4:	682b      	ldr	r3, [r5, #0]
 80013e6:	b103      	cbz	r3, 80013ea <_sbrk_r+0x1a>
 80013e8:	6023      	str	r3, [r4, #0]
 80013ea:	bd38      	pop	{r3, r4, r5, pc}
 80013ec:	200001c4 	.word	0x200001c4

080013f0 <_write_r>:
 80013f0:	b538      	push	{r3, r4, r5, lr}
 80013f2:	4d07      	ldr	r5, [pc, #28]	@ (8001410 <_write_r+0x20>)
 80013f4:	4604      	mov	r4, r0
 80013f6:	4608      	mov	r0, r1
 80013f8:	4611      	mov	r1, r2
 80013fa:	2200      	movs	r2, #0
 80013fc:	602a      	str	r2, [r5, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	f7ff f873 	bl	80004ea <_write>
 8001404:	1c43      	adds	r3, r0, #1
 8001406:	d102      	bne.n	800140e <_write_r+0x1e>
 8001408:	682b      	ldr	r3, [r5, #0]
 800140a:	b103      	cbz	r3, 800140e <_write_r+0x1e>
 800140c:	6023      	str	r3, [r4, #0]
 800140e:	bd38      	pop	{r3, r4, r5, pc}
 8001410:	200001c4 	.word	0x200001c4

08001414 <_free_r>:
 8001414:	b538      	push	{r3, r4, r5, lr}
 8001416:	4605      	mov	r5, r0
 8001418:	2900      	cmp	r1, #0
 800141a:	d041      	beq.n	80014a0 <_free_r+0x8c>
 800141c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001420:	1f0c      	subs	r4, r1, #4
 8001422:	2b00      	cmp	r3, #0
 8001424:	bfb8      	it	lt
 8001426:	18e4      	addlt	r4, r4, r3
 8001428:	f7ff fe36 	bl	8001098 <__malloc_lock>
 800142c:	4a1d      	ldr	r2, [pc, #116]	@ (80014a4 <_free_r+0x90>)
 800142e:	6813      	ldr	r3, [r2, #0]
 8001430:	b933      	cbnz	r3, 8001440 <_free_r+0x2c>
 8001432:	6063      	str	r3, [r4, #4]
 8001434:	6014      	str	r4, [r2, #0]
 8001436:	4628      	mov	r0, r5
 8001438:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800143c:	f7ff be32 	b.w	80010a4 <__malloc_unlock>
 8001440:	42a3      	cmp	r3, r4
 8001442:	d908      	bls.n	8001456 <_free_r+0x42>
 8001444:	6820      	ldr	r0, [r4, #0]
 8001446:	1821      	adds	r1, r4, r0
 8001448:	428b      	cmp	r3, r1
 800144a:	bf01      	itttt	eq
 800144c:	6819      	ldreq	r1, [r3, #0]
 800144e:	685b      	ldreq	r3, [r3, #4]
 8001450:	1809      	addeq	r1, r1, r0
 8001452:	6021      	streq	r1, [r4, #0]
 8001454:	e7ed      	b.n	8001432 <_free_r+0x1e>
 8001456:	461a      	mov	r2, r3
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	b10b      	cbz	r3, 8001460 <_free_r+0x4c>
 800145c:	42a3      	cmp	r3, r4
 800145e:	d9fa      	bls.n	8001456 <_free_r+0x42>
 8001460:	6811      	ldr	r1, [r2, #0]
 8001462:	1850      	adds	r0, r2, r1
 8001464:	42a0      	cmp	r0, r4
 8001466:	d10b      	bne.n	8001480 <_free_r+0x6c>
 8001468:	6820      	ldr	r0, [r4, #0]
 800146a:	4401      	add	r1, r0
 800146c:	1850      	adds	r0, r2, r1
 800146e:	4283      	cmp	r3, r0
 8001470:	6011      	str	r1, [r2, #0]
 8001472:	d1e0      	bne.n	8001436 <_free_r+0x22>
 8001474:	6818      	ldr	r0, [r3, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	6053      	str	r3, [r2, #4]
 800147a:	4408      	add	r0, r1
 800147c:	6010      	str	r0, [r2, #0]
 800147e:	e7da      	b.n	8001436 <_free_r+0x22>
 8001480:	d902      	bls.n	8001488 <_free_r+0x74>
 8001482:	230c      	movs	r3, #12
 8001484:	602b      	str	r3, [r5, #0]
 8001486:	e7d6      	b.n	8001436 <_free_r+0x22>
 8001488:	6820      	ldr	r0, [r4, #0]
 800148a:	1821      	adds	r1, r4, r0
 800148c:	428b      	cmp	r3, r1
 800148e:	bf04      	itt	eq
 8001490:	6819      	ldreq	r1, [r3, #0]
 8001492:	685b      	ldreq	r3, [r3, #4]
 8001494:	6063      	str	r3, [r4, #4]
 8001496:	bf04      	itt	eq
 8001498:	1809      	addeq	r1, r1, r0
 800149a:	6021      	streq	r1, [r4, #0]
 800149c:	6054      	str	r4, [r2, #4]
 800149e:	e7ca      	b.n	8001436 <_free_r+0x22>
 80014a0:	bd38      	pop	{r3, r4, r5, pc}
 80014a2:	bf00      	nop
 80014a4:	200001c0 	.word	0x200001c0

080014a8 <_init>:
 80014a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014aa:	bf00      	nop
 80014ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ae:	bc08      	pop	{r3}
 80014b0:	469e      	mov	lr, r3
 80014b2:	4770      	bx	lr

080014b4 <_fini>:
 80014b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014b6:	bf00      	nop
 80014b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ba:	bc08      	pop	{r3}
 80014bc:	469e      	mov	lr, r3
 80014be:	4770      	bx	lr

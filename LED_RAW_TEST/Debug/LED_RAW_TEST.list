
LED_RAW_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000284  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  0800041c  0800041c  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  0800041c  0800041c  00002018  2**0
                  CONTENTS
  4 .ARM          00000000  0800041c  0800041c  00002018  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800041c  0800041c  00002018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800041c  0800041c  0000141c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08000420  08000420  00001420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000018  20000000  08000424  00002000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000018  0800043c  00002018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000038  0800043c  00002038  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00002018  2**0
                  CONTENTS, READONLY
 12 .debug_info   000005f6  00000000  00000000  00002048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000002e9  00000000  00000000  0000263e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00002928  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000067  00000000  00000000  000029d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001107  00000000  00000000  00002a37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001065  00000000  00000000  00003b3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003d21  00000000  00000000  00004ba3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000088c4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ec  00000000  00000000  00008908  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  000089f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000018 	.word	0x20000018
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08000404 	.word	0x08000404

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000001c 	.word	0x2000001c
 80001d4:	08000404 	.word	0x08000404

080001d8 <blinkLed>:
 */

#import "blink_led.h"
#include "init.h"

void blinkLed(int32_t const ledMode) {
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]


	if (ledMode == AUTO_BLINK) {
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b02      	cmp	r3, #2
 80001e4:	d124      	bne.n	8000230 <blinkLed+0x58>

		*pGPIOA_DATA_OUT |= (1 << 5); // EN LD2
 80001e6:	4b21      	ldr	r3, [pc, #132]	@ (800026c <blinkLed+0x94>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	681a      	ldr	r2, [r3, #0]
 80001ec:	4b1f      	ldr	r3, [pc, #124]	@ (800026c <blinkLed+0x94>)
 80001ee:	681b      	ldr	r3, [r3, #0]
 80001f0:	f042 0220 	orr.w	r2, r2, #32
 80001f4:	601a      	str	r2, [r3, #0]
		// Delay
		for (int i=0; i<=1000000; i++);
 80001f6:	2300      	movs	r3, #0
 80001f8:	60fb      	str	r3, [r7, #12]
 80001fa:	e002      	b.n	8000202 <blinkLed+0x2a>
 80001fc:	68fb      	ldr	r3, [r7, #12]
 80001fe:	3301      	adds	r3, #1
 8000200:	60fb      	str	r3, [r7, #12]
 8000202:	68fb      	ldr	r3, [r7, #12]
 8000204:	4a1a      	ldr	r2, [pc, #104]	@ (8000270 <blinkLed+0x98>)
 8000206:	4293      	cmp	r3, r2
 8000208:	ddf8      	ble.n	80001fc <blinkLed+0x24>
		*pGPIOA_DATA_OUT &= ~(1 << 5); //OFF LD2
 800020a:	4b18      	ldr	r3, [pc, #96]	@ (800026c <blinkLed+0x94>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	681a      	ldr	r2, [r3, #0]
 8000210:	4b16      	ldr	r3, [pc, #88]	@ (800026c <blinkLed+0x94>)
 8000212:	681b      	ldr	r3, [r3, #0]
 8000214:	f022 0220 	bic.w	r2, r2, #32
 8000218:	601a      	str	r2, [r3, #0]
		// Delay
		for (int i=0; i<=1000000; i++);
 800021a:	2300      	movs	r3, #0
 800021c:	60bb      	str	r3, [r7, #8]
 800021e:	e002      	b.n	8000226 <blinkLed+0x4e>
 8000220:	68bb      	ldr	r3, [r7, #8]
 8000222:	3301      	adds	r3, #1
 8000224:	60bb      	str	r3, [r7, #8]
 8000226:	68bb      	ldr	r3, [r7, #8]
 8000228:	4a11      	ldr	r2, [pc, #68]	@ (8000270 <blinkLed+0x98>)
 800022a:	4293      	cmp	r3, r2
 800022c:	ddf8      	ble.n	8000220 <blinkLed+0x48>

	} else if (ledMode == OFF) {

		*pGPIOA_DATA_OUT &= ~(1 << 5); //OFF LD2
	}
}
 800022e:	e016      	b.n	800025e <blinkLed+0x86>
	} else if (ledMode == ON) {
 8000230:	687b      	ldr	r3, [r7, #4]
 8000232:	2b01      	cmp	r3, #1
 8000234:	d108      	bne.n	8000248 <blinkLed+0x70>
		*pGPIOA_DATA_OUT |= (1 << 5); // EN LD2
 8000236:	4b0d      	ldr	r3, [pc, #52]	@ (800026c <blinkLed+0x94>)
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	681a      	ldr	r2, [r3, #0]
 800023c:	4b0b      	ldr	r3, [pc, #44]	@ (800026c <blinkLed+0x94>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	f042 0220 	orr.w	r2, r2, #32
 8000244:	601a      	str	r2, [r3, #0]
}
 8000246:	e00a      	b.n	800025e <blinkLed+0x86>
	} else if (ledMode == OFF) {
 8000248:	687b      	ldr	r3, [r7, #4]
 800024a:	2b00      	cmp	r3, #0
 800024c:	d107      	bne.n	800025e <blinkLed+0x86>
		*pGPIOA_DATA_OUT &= ~(1 << 5); //OFF LD2
 800024e:	4b07      	ldr	r3, [pc, #28]	@ (800026c <blinkLed+0x94>)
 8000250:	681b      	ldr	r3, [r3, #0]
 8000252:	681a      	ldr	r2, [r3, #0]
 8000254:	4b05      	ldr	r3, [pc, #20]	@ (800026c <blinkLed+0x94>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	f022 0220 	bic.w	r2, r2, #32
 800025c:	601a      	str	r2, [r3, #0]
}
 800025e:	bf00      	nop
 8000260:	3714      	adds	r7, #20
 8000262:	46bd      	mov	sp, r7
 8000264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000268:	4770      	bx	lr
 800026a:	bf00      	nop
 800026c:	20000000 	.word	0x20000000
 8000270:	000f4240 	.word	0x000f4240

08000274 <init>:

#include "init.h"
#include "blink_led.h"
#include "read_pin.h"

void init(void) {
 8000274:	b480      	push	{r7}
 8000276:	af00      	add	r7, sp, #0

	// PIN GPIO A INIT
	// check if RCC_AHB1ENR on GPIOA is enable, if not, enable it
	*pGPIOA_CLK_EN & (1 << 0) ? 1 : (*pGPIOA_CLK_EN |= (1 << 0));
 8000278:	4b25      	ldr	r3, [pc, #148]	@ (8000310 <init+0x9c>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	681b      	ldr	r3, [r3, #0]
 800027e:	f003 0301 	and.w	r3, r3, #1
 8000282:	2b00      	cmp	r3, #0
 8000284:	d107      	bne.n	8000296 <init+0x22>
 8000286:	4b22      	ldr	r3, [pc, #136]	@ (8000310 <init+0x9c>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	681a      	ldr	r2, [r3, #0]
 800028c:	4b20      	ldr	r3, [pc, #128]	@ (8000310 <init+0x9c>)
 800028e:	681b      	ldr	r3, [r3, #0]
 8000290:	f042 0201 	orr.w	r2, r2, #1
 8000294:	601a      	str	r2, [r3, #0]

	// check if GPIOx_MODER on PA5 is enable, if not, enable it. If it is set to anything, we clear  to set
	((*pGPIOA_MODE_OUT >> 10) & (3 << 0)) ? *pGPIOA_MODE_OUT &= ~(3 << 10) : (*pGPIOA_MODE_OUT |= (1 << 10));
 8000296:	4b1f      	ldr	r3, [pc, #124]	@ (8000314 <init+0xa0>)
 8000298:	681b      	ldr	r3, [r3, #0]
 800029a:	681b      	ldr	r3, [r3, #0]
 800029c:	129b      	asrs	r3, r3, #10
 800029e:	f003 0303 	and.w	r3, r3, #3
 80002a2:	2b00      	cmp	r3, #0
 80002a4:	d008      	beq.n	80002b8 <init+0x44>
 80002a6:	4b1b      	ldr	r3, [pc, #108]	@ (8000314 <init+0xa0>)
 80002a8:	681b      	ldr	r3, [r3, #0]
 80002aa:	681a      	ldr	r2, [r3, #0]
 80002ac:	4b19      	ldr	r3, [pc, #100]	@ (8000314 <init+0xa0>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	f422 6240 	bic.w	r2, r2, #3072	@ 0xc00
 80002b4:	601a      	str	r2, [r3, #0]
 80002b6:	e007      	b.n	80002c8 <init+0x54>
 80002b8:	4b16      	ldr	r3, [pc, #88]	@ (8000314 <init+0xa0>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	681a      	ldr	r2, [r3, #0]
 80002be:	4b15      	ldr	r3, [pc, #84]	@ (8000314 <init+0xa0>)
 80002c0:	681b      	ldr	r3, [r3, #0]
 80002c2:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80002c6:	601a      	str	r2, [r3, #0]


	// PIN GPIO C INIT
	// check and enable clock on GPIO C for PC0
	*pGPIOC_CLK_EN & (1 << 2) ? 1 : (*pGPIOC_CLK_EN |= (1 << 2));
 80002c8:	4b13      	ldr	r3, [pc, #76]	@ (8000318 <init+0xa4>)
 80002ca:	681b      	ldr	r3, [r3, #0]
 80002cc:	681b      	ldr	r3, [r3, #0]
 80002ce:	f003 0304 	and.w	r3, r3, #4
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d107      	bne.n	80002e6 <init+0x72>
 80002d6:	4b10      	ldr	r3, [pc, #64]	@ (8000318 <init+0xa4>)
 80002d8:	681b      	ldr	r3, [r3, #0]
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	4b0e      	ldr	r3, [pc, #56]	@ (8000318 <init+0xa4>)
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	f042 0204 	orr.w	r2, r2, #4
 80002e4:	601a      	str	r2, [r3, #0]

	// set mode to input in PC0 (input mode is two bits zeroed in first pos (/...00)
	*pGPIOC_MODE_IN & (3 << 0) ? (*pGPIOC_MODE_IN &= ~(3 << 0)) : 1;
 80002e6:	4b0d      	ldr	r3, [pc, #52]	@ (800031c <init+0xa8>)
 80002e8:	681b      	ldr	r3, [r3, #0]
 80002ea:	681b      	ldr	r3, [r3, #0]
 80002ec:	f003 0303 	and.w	r3, r3, #3
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d007      	beq.n	8000304 <init+0x90>
 80002f4:	4b09      	ldr	r3, [pc, #36]	@ (800031c <init+0xa8>)
 80002f6:	681b      	ldr	r3, [r3, #0]
 80002f8:	681a      	ldr	r2, [r3, #0]
 80002fa:	4b08      	ldr	r3, [pc, #32]	@ (800031c <init+0xa8>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	f022 0203 	bic.w	r2, r2, #3
 8000302:	601a      	str	r2, [r3, #0]
}
 8000304:	bf00      	nop
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
 800030e:	bf00      	nop
 8000310:	2000000c 	.word	0x2000000c
 8000314:	20000010 	.word	0x20000010
 8000318:	20000004 	.word	0x20000004
 800031c:	20000008 	.word	0x20000008

08000320 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 8000320:	b580      	push	{r7, lr}
 8000322:	af00      	add	r7, sp, #0

	init();
 8000324:	f7ff ffa6 	bl	8000274 <init>

	while(1) {

	readPC0State();
 8000328:	f000 f802 	bl	8000330 <readPC0State>
 800032c:	e7fc      	b.n	8000328 <main+0x8>
	...

08000330 <readPC0State>:
#include <stdint.h>
#include "read_pin.h"
#include "blink_led.h"
#include "init.h"

void readPC0State(void) {
 8000330:	b580      	push	{r7, lr}
 8000332:	af00      	add	r7, sp, #0

	// read input data register on GPIO C for PC0 (high should turn the LED on and GND should turn off)
	*pGPIOC_INDR & (1 << 0) ? (boardLedStatus = ON) : (boardLedStatus = OFF);
 8000334:	4b0a      	ldr	r3, [pc, #40]	@ (8000360 <readPC0State+0x30>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	f003 0301 	and.w	r3, r3, #1
 800033e:	2b00      	cmp	r3, #0
 8000340:	d003      	beq.n	800034a <readPC0State+0x1a>
 8000342:	4b08      	ldr	r3, [pc, #32]	@ (8000364 <readPC0State+0x34>)
 8000344:	2201      	movs	r2, #1
 8000346:	701a      	strb	r2, [r3, #0]
 8000348:	e002      	b.n	8000350 <readPC0State+0x20>
 800034a:	4b06      	ldr	r3, [pc, #24]	@ (8000364 <readPC0State+0x34>)
 800034c:	2200      	movs	r2, #0
 800034e:	701a      	strb	r2, [r3, #0]

	blinkLed(boardLedStatus);
 8000350:	4b04      	ldr	r3, [pc, #16]	@ (8000364 <readPC0State+0x34>)
 8000352:	781b      	ldrb	r3, [r3, #0]
 8000354:	4618      	mov	r0, r3
 8000356:	f7ff ff3f 	bl	80001d8 <blinkLed>

}
 800035a:	bf00      	nop
 800035c:	bd80      	pop	{r7, pc}
 800035e:	bf00      	nop
 8000360:	20000014 	.word	0x20000014
 8000364:	20000034 	.word	0x20000034

08000368 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000368:	480d      	ldr	r0, [pc, #52]	@ (80003a0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800036a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800036c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000370:	480c      	ldr	r0, [pc, #48]	@ (80003a4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000372:	490d      	ldr	r1, [pc, #52]	@ (80003a8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000374:	4a0d      	ldr	r2, [pc, #52]	@ (80003ac <LoopForever+0xe>)
  movs r3, #0
 8000376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000378:	e002      	b.n	8000380 <LoopCopyDataInit>

0800037a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800037a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800037c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800037e:	3304      	adds	r3, #4

08000380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000384:	d3f9      	bcc.n	800037a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000386:	4a0a      	ldr	r2, [pc, #40]	@ (80003b0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000388:	4c0a      	ldr	r4, [pc, #40]	@ (80003b4 <LoopForever+0x16>)
  movs r3, #0
 800038a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800038c:	e001      	b.n	8000392 <LoopFillZerobss>

0800038e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800038e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000390:	3204      	adds	r2, #4

08000392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000394:	d3fb      	bcc.n	800038e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000396:	f000 f811 	bl	80003bc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800039a:	f7ff ffc1 	bl	8000320 <main>

0800039e <LoopForever>:

LoopForever:
  b LoopForever
 800039e:	e7fe      	b.n	800039e <LoopForever>
  ldr   r0, =_estack
 80003a0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80003a4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80003a8:	20000018 	.word	0x20000018
  ldr r2, =_sidata
 80003ac:	08000424 	.word	0x08000424
  ldr r2, =_sbss
 80003b0:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 80003b4:	20000038 	.word	0x20000038

080003b8 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80003b8:	e7fe      	b.n	80003b8 <ADC_IRQHandler>
	...

080003bc <__libc_init_array>:
 80003bc:	b570      	push	{r4, r5, r6, lr}
 80003be:	4d0d      	ldr	r5, [pc, #52]	@ (80003f4 <__libc_init_array+0x38>)
 80003c0:	4c0d      	ldr	r4, [pc, #52]	@ (80003f8 <__libc_init_array+0x3c>)
 80003c2:	1b64      	subs	r4, r4, r5
 80003c4:	10a4      	asrs	r4, r4, #2
 80003c6:	2600      	movs	r6, #0
 80003c8:	42a6      	cmp	r6, r4
 80003ca:	d109      	bne.n	80003e0 <__libc_init_array+0x24>
 80003cc:	4d0b      	ldr	r5, [pc, #44]	@ (80003fc <__libc_init_array+0x40>)
 80003ce:	4c0c      	ldr	r4, [pc, #48]	@ (8000400 <__libc_init_array+0x44>)
 80003d0:	f000 f818 	bl	8000404 <_init>
 80003d4:	1b64      	subs	r4, r4, r5
 80003d6:	10a4      	asrs	r4, r4, #2
 80003d8:	2600      	movs	r6, #0
 80003da:	42a6      	cmp	r6, r4
 80003dc:	d105      	bne.n	80003ea <__libc_init_array+0x2e>
 80003de:	bd70      	pop	{r4, r5, r6, pc}
 80003e0:	f855 3b04 	ldr.w	r3, [r5], #4
 80003e4:	4798      	blx	r3
 80003e6:	3601      	adds	r6, #1
 80003e8:	e7ee      	b.n	80003c8 <__libc_init_array+0xc>
 80003ea:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ee:	4798      	blx	r3
 80003f0:	3601      	adds	r6, #1
 80003f2:	e7f2      	b.n	80003da <__libc_init_array+0x1e>
 80003f4:	0800041c 	.word	0x0800041c
 80003f8:	0800041c 	.word	0x0800041c
 80003fc:	0800041c 	.word	0x0800041c
 8000400:	08000420 	.word	0x08000420

08000404 <_init>:
 8000404:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000406:	bf00      	nop
 8000408:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800040a:	bc08      	pop	{r3}
 800040c:	469e      	mov	lr, r3
 800040e:	4770      	bx	lr

08000410 <_fini>:
 8000410:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000412:	bf00      	nop
 8000414:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000416:	bc08      	pop	{r3}
 8000418:	469e      	mov	lr, r3
 800041a:	4770      	bx	lr

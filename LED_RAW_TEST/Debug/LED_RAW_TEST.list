
LED_RAW_TEST.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000024c  08000198  08000198  00001198  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  080003e4  080003ec  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  080003e4  080003e4  000013ec  2**0
                  CONTENTS
  4 .ARM          00000000  080003e4  080003e4  000013ec  2**0
                  CONTENTS
  5 .preinit_array 00000000  080003e4  080003ec  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080003e4  080003e4  000013e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080003e8  080003e8  000013e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000000  20000000  20000000  000013ec  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000000  080003ec  00002000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  080003ec  00002020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000013ec  2**0
                  CONTENTS, READONLY
 12 .debug_info   000005d5  00000000  00000000  0000141c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000034d  00000000  00000000  000019f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000000a8  00000000  00000000  00001d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000067  00000000  00000000  00001de8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001107  00000000  00000000  00001e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00001062  00000000  00000000  00002f56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00003d12  00000000  00000000  00003fb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00007cca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000ec  00000000  00000000  00007d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007c  00000000  00000000  00007dfc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	@ (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	@ (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	@ (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000000 	.word	0x20000000
 80001b4:	00000000 	.word	0x00000000
 80001b8:	080003cc 	.word	0x080003cc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	@ (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	@ (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	@ (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000004 	.word	0x20000004
 80001d4:	080003cc 	.word	0x080003cc

080001d8 <blinkLed>:
 */

#import "blink_led.h"
#include "init.h"

void blinkLed(int32_t const ledMode) {
 80001d8:	b480      	push	{r7}
 80001da:	b085      	sub	sp, #20
 80001dc:	af00      	add	r7, sp, #0
 80001de:	6078      	str	r0, [r7, #4]


	if (ledMode == AUTO_BLINK) {
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	2b02      	cmp	r3, #2
 80001e4:	d120      	bne.n	8000228 <blinkLed+0x50>

		*pGPIOA_DATA_OUT |= (1 << 5); // EN LD2
 80001e6:	4b1b      	ldr	r3, [pc, #108]	@ (8000254 <blinkLed+0x7c>)
 80001e8:	681b      	ldr	r3, [r3, #0]
 80001ea:	4a1a      	ldr	r2, [pc, #104]	@ (8000254 <blinkLed+0x7c>)
 80001ec:	f043 0320 	orr.w	r3, r3, #32
 80001f0:	6013      	str	r3, [r2, #0]
		// Delay
		for (int i=0; i<=1000000; i++);
 80001f2:	2300      	movs	r3, #0
 80001f4:	60fb      	str	r3, [r7, #12]
 80001f6:	e002      	b.n	80001fe <blinkLed+0x26>
 80001f8:	68fb      	ldr	r3, [r7, #12]
 80001fa:	3301      	adds	r3, #1
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68fb      	ldr	r3, [r7, #12]
 8000200:	4a15      	ldr	r2, [pc, #84]	@ (8000258 <blinkLed+0x80>)
 8000202:	4293      	cmp	r3, r2
 8000204:	ddf8      	ble.n	80001f8 <blinkLed+0x20>
		*pGPIOA_DATA_OUT &= ~(1 << 5); //OFF LD2
 8000206:	4b13      	ldr	r3, [pc, #76]	@ (8000254 <blinkLed+0x7c>)
 8000208:	681b      	ldr	r3, [r3, #0]
 800020a:	4a12      	ldr	r2, [pc, #72]	@ (8000254 <blinkLed+0x7c>)
 800020c:	f023 0320 	bic.w	r3, r3, #32
 8000210:	6013      	str	r3, [r2, #0]
		// Delay
		for (int i=0; i<=1000000; i++);
 8000212:	2300      	movs	r3, #0
 8000214:	60bb      	str	r3, [r7, #8]
 8000216:	e002      	b.n	800021e <blinkLed+0x46>
 8000218:	68bb      	ldr	r3, [r7, #8]
 800021a:	3301      	adds	r3, #1
 800021c:	60bb      	str	r3, [r7, #8]
 800021e:	68bb      	ldr	r3, [r7, #8]
 8000220:	4a0d      	ldr	r2, [pc, #52]	@ (8000258 <blinkLed+0x80>)
 8000222:	4293      	cmp	r3, r2
 8000224:	ddf8      	ble.n	8000218 <blinkLed+0x40>

	} else {

		*pGPIOA_DATA_OUT &= ~(1 << 5); //OFF LD2
	}
}
 8000226:	e00f      	b.n	8000248 <blinkLed+0x70>
	} else if (ledMode == ON) {
 8000228:	687b      	ldr	r3, [r7, #4]
 800022a:	2b01      	cmp	r3, #1
 800022c:	d106      	bne.n	800023c <blinkLed+0x64>
		*pGPIOA_DATA_OUT |= (1 << 5); // EN LD2
 800022e:	4b09      	ldr	r3, [pc, #36]	@ (8000254 <blinkLed+0x7c>)
 8000230:	681b      	ldr	r3, [r3, #0]
 8000232:	4a08      	ldr	r2, [pc, #32]	@ (8000254 <blinkLed+0x7c>)
 8000234:	f043 0320 	orr.w	r3, r3, #32
 8000238:	6013      	str	r3, [r2, #0]
}
 800023a:	e005      	b.n	8000248 <blinkLed+0x70>
		*pGPIOA_DATA_OUT &= ~(1 << 5); //OFF LD2
 800023c:	4b05      	ldr	r3, [pc, #20]	@ (8000254 <blinkLed+0x7c>)
 800023e:	681b      	ldr	r3, [r3, #0]
 8000240:	4a04      	ldr	r2, [pc, #16]	@ (8000254 <blinkLed+0x7c>)
 8000242:	f023 0320 	bic.w	r3, r3, #32
 8000246:	6013      	str	r3, [r2, #0]
}
 8000248:	bf00      	nop
 800024a:	3714      	adds	r7, #20
 800024c:	46bd      	mov	sp, r7
 800024e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000252:	4770      	bx	lr
 8000254:	40020014 	.word	0x40020014
 8000258:	000f4240 	.word	0x000f4240

0800025c <init>:

#include "init.h"
#include "blink_led.h"
#include "read_pin.h"

void init(void) {
 800025c:	b480      	push	{r7}
 800025e:	af00      	add	r7, sp, #0

	// PIN GPIO A INIT
	// check if RCC_AHB1ENR on GPIOA is enable, if not, enable it
	*pGPIOA_CLK_EN & (1 << 0) ? 1 : (*pGPIOA_CLK_EN |= (1 << 0));
 8000260:	4b1e      	ldr	r3, [pc, #120]	@ (80002dc <init+0x80>)
 8000262:	681b      	ldr	r3, [r3, #0]
 8000264:	f003 0301 	and.w	r3, r3, #1
 8000268:	2b00      	cmp	r3, #0
 800026a:	d105      	bne.n	8000278 <init+0x1c>
 800026c:	4b1b      	ldr	r3, [pc, #108]	@ (80002dc <init+0x80>)
 800026e:	681b      	ldr	r3, [r3, #0]
 8000270:	4a1a      	ldr	r2, [pc, #104]	@ (80002dc <init+0x80>)
 8000272:	f043 0301 	orr.w	r3, r3, #1
 8000276:	6013      	str	r3, [r2, #0]

	// check if GPIOx_MODER on PA5 is enable, if not, enable it. If it is set to anything, we clear  to set
	((*pGPIOA_MODE_OUT >> 10) & (3 << 0)) ? *pGPIOA_MODE_OUT &= ~(3 << 10) : (*pGPIOA_MODE_OUT |= (1 << 10));
 8000278:	4b19      	ldr	r3, [pc, #100]	@ (80002e0 <init+0x84>)
 800027a:	681b      	ldr	r3, [r3, #0]
 800027c:	129b      	asrs	r3, r3, #10
 800027e:	f003 0303 	and.w	r3, r3, #3
 8000282:	2b00      	cmp	r3, #0
 8000284:	d006      	beq.n	8000294 <init+0x38>
 8000286:	4b16      	ldr	r3, [pc, #88]	@ (80002e0 <init+0x84>)
 8000288:	681b      	ldr	r3, [r3, #0]
 800028a:	4a15      	ldr	r2, [pc, #84]	@ (80002e0 <init+0x84>)
 800028c:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000290:	6013      	str	r3, [r2, #0]
 8000292:	e005      	b.n	80002a0 <init+0x44>
 8000294:	4b12      	ldr	r3, [pc, #72]	@ (80002e0 <init+0x84>)
 8000296:	681b      	ldr	r3, [r3, #0]
 8000298:	4a11      	ldr	r2, [pc, #68]	@ (80002e0 <init+0x84>)
 800029a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800029e:	6013      	str	r3, [r2, #0]


	// PIN GPIO C INIT
	// check and enable clock on GPIO C for PC0
	*pGPIOC_CLK_EN & (1 << 2) ? 1 : (*pGPIOC_CLK_EN |= (1 << 2));
 80002a0:	4b0e      	ldr	r3, [pc, #56]	@ (80002dc <init+0x80>)
 80002a2:	681b      	ldr	r3, [r3, #0]
 80002a4:	f003 0304 	and.w	r3, r3, #4
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d105      	bne.n	80002b8 <init+0x5c>
 80002ac:	4b0b      	ldr	r3, [pc, #44]	@ (80002dc <init+0x80>)
 80002ae:	681b      	ldr	r3, [r3, #0]
 80002b0:	4a0a      	ldr	r2, [pc, #40]	@ (80002dc <init+0x80>)
 80002b2:	f043 0304 	orr.w	r3, r3, #4
 80002b6:	6013      	str	r3, [r2, #0]

	// set mode to input in PC0 (input mode is two bits zeroed in first pos (/...00)
	*pGPIOC_MODE_IN & (3 << 0) ? (*pGPIOC_MODE_IN &= ~(3 << 0)) : 1;
 80002b8:	4b0a      	ldr	r3, [pc, #40]	@ (80002e4 <init+0x88>)
 80002ba:	681b      	ldr	r3, [r3, #0]
 80002bc:	f003 0303 	and.w	r3, r3, #3
 80002c0:	2b00      	cmp	r3, #0
 80002c2:	d005      	beq.n	80002d0 <init+0x74>
 80002c4:	4b07      	ldr	r3, [pc, #28]	@ (80002e4 <init+0x88>)
 80002c6:	681b      	ldr	r3, [r3, #0]
 80002c8:	4a06      	ldr	r2, [pc, #24]	@ (80002e4 <init+0x88>)
 80002ca:	f023 0303 	bic.w	r3, r3, #3
 80002ce:	6013      	str	r3, [r2, #0]
}
 80002d0:	bf00      	nop
 80002d2:	46bd      	mov	sp, r7
 80002d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d8:	4770      	bx	lr
 80002da:	bf00      	nop
 80002dc:	40023830 	.word	0x40023830
 80002e0:	40020000 	.word	0x40020000
 80002e4:	40020800 	.word	0x40020800

080002e8 <main>:
#if !defined(__SOFT_FP__) && defined(__ARM_FP)
  #warning "FPU is not initialized, but the project is compiling for an FPU. Please initialize the FPU before use."
#endif

int main(void)
{
 80002e8:	b580      	push	{r7, lr}
 80002ea:	af00      	add	r7, sp, #0

	init();
 80002ec:	f7ff ffb6 	bl	800025c <init>

	while(1) {

	readPC0State();
 80002f0:	f000 f802 	bl	80002f8 <readPC0State>
 80002f4:	e7fc      	b.n	80002f0 <main+0x8>
	...

080002f8 <readPC0State>:
#include <stdint.h>
#include "read_pin.h"
#include "blink_led.h"
#include "init.h"

void readPC0State(void) {
 80002f8:	b580      	push	{r7, lr}
 80002fa:	af00      	add	r7, sp, #0

	// for this to work properly, the pins MUST BE pulled low, having GND as reference all the time.

	// read input data register on GPIO C for PC0 (high should turn the LED on and GND should turn off)
	(*pGPIOC_INDR & (1 << 0)) ? (led = 1) : (led = 0);
 80002fc:	4b0a      	ldr	r3, [pc, #40]	@ (8000328 <readPC0State+0x30>)
 80002fe:	681b      	ldr	r3, [r3, #0]
 8000300:	f003 0301 	and.w	r3, r3, #1
 8000304:	2b00      	cmp	r3, #0
 8000306:	d003      	beq.n	8000310 <readPC0State+0x18>
 8000308:	4b08      	ldr	r3, [pc, #32]	@ (800032c <readPC0State+0x34>)
 800030a:	2201      	movs	r2, #1
 800030c:	701a      	strb	r2, [r3, #0]
 800030e:	e002      	b.n	8000316 <readPC0State+0x1e>
 8000310:	4b06      	ldr	r3, [pc, #24]	@ (800032c <readPC0State+0x34>)
 8000312:	2200      	movs	r2, #0
 8000314:	701a      	strb	r2, [r3, #0]



	blinkLed(led);
 8000316:	4b05      	ldr	r3, [pc, #20]	@ (800032c <readPC0State+0x34>)
 8000318:	781b      	ldrb	r3, [r3, #0]
 800031a:	b2db      	uxtb	r3, r3
 800031c:	4618      	mov	r0, r3
 800031e:	f7ff ff5b 	bl	80001d8 <blinkLed>

}
 8000322:	bf00      	nop
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	40020810 	.word	0x40020810
 800032c:	2000001c 	.word	0x2000001c

08000330 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000330:	480d      	ldr	r0, [pc, #52]	@ (8000368 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000332:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000334:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000338:	480c      	ldr	r0, [pc, #48]	@ (800036c <LoopForever+0x6>)
  ldr r1, =_edata
 800033a:	490d      	ldr	r1, [pc, #52]	@ (8000370 <LoopForever+0xa>)
  ldr r2, =_sidata
 800033c:	4a0d      	ldr	r2, [pc, #52]	@ (8000374 <LoopForever+0xe>)
  movs r3, #0
 800033e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000340:	e002      	b.n	8000348 <LoopCopyDataInit>

08000342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000346:	3304      	adds	r3, #4

08000348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800034a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800034c:	d3f9      	bcc.n	8000342 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800034e:	4a0a      	ldr	r2, [pc, #40]	@ (8000378 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000350:	4c0a      	ldr	r4, [pc, #40]	@ (800037c <LoopForever+0x16>)
  movs r3, #0
 8000352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000354:	e001      	b.n	800035a <LoopFillZerobss>

08000356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000358:	3204      	adds	r2, #4

0800035a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800035a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800035c:	d3fb      	bcc.n	8000356 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800035e:	f000 f811 	bl	8000384 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000362:	f7ff ffc1 	bl	80002e8 <main>

08000366 <LoopForever>:

LoopForever:
  b LoopForever
 8000366:	e7fe      	b.n	8000366 <LoopForever>
  ldr   r0, =_estack
 8000368:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800036c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000370:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000374:	080003ec 	.word	0x080003ec
  ldr r2, =_sbss
 8000378:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 800037c:	20000020 	.word	0x20000020

08000380 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000380:	e7fe      	b.n	8000380 <ADC_IRQHandler>
	...

08000384 <__libc_init_array>:
 8000384:	b570      	push	{r4, r5, r6, lr}
 8000386:	4d0d      	ldr	r5, [pc, #52]	@ (80003bc <__libc_init_array+0x38>)
 8000388:	4c0d      	ldr	r4, [pc, #52]	@ (80003c0 <__libc_init_array+0x3c>)
 800038a:	1b64      	subs	r4, r4, r5
 800038c:	10a4      	asrs	r4, r4, #2
 800038e:	2600      	movs	r6, #0
 8000390:	42a6      	cmp	r6, r4
 8000392:	d109      	bne.n	80003a8 <__libc_init_array+0x24>
 8000394:	4d0b      	ldr	r5, [pc, #44]	@ (80003c4 <__libc_init_array+0x40>)
 8000396:	4c0c      	ldr	r4, [pc, #48]	@ (80003c8 <__libc_init_array+0x44>)
 8000398:	f000 f818 	bl	80003cc <_init>
 800039c:	1b64      	subs	r4, r4, r5
 800039e:	10a4      	asrs	r4, r4, #2
 80003a0:	2600      	movs	r6, #0
 80003a2:	42a6      	cmp	r6, r4
 80003a4:	d105      	bne.n	80003b2 <__libc_init_array+0x2e>
 80003a6:	bd70      	pop	{r4, r5, r6, pc}
 80003a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80003ac:	4798      	blx	r3
 80003ae:	3601      	adds	r6, #1
 80003b0:	e7ee      	b.n	8000390 <__libc_init_array+0xc>
 80003b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80003b6:	4798      	blx	r3
 80003b8:	3601      	adds	r6, #1
 80003ba:	e7f2      	b.n	80003a2 <__libc_init_array+0x1e>
 80003bc:	080003e4 	.word	0x080003e4
 80003c0:	080003e4 	.word	0x080003e4
 80003c4:	080003e4 	.word	0x080003e4
 80003c8:	080003e8 	.word	0x080003e8

080003cc <_init>:
 80003cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003ce:	bf00      	nop
 80003d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003d2:	bc08      	pop	{r3}
 80003d4:	469e      	mov	lr, r3
 80003d6:	4770      	bx	lr

080003d8 <_fini>:
 80003d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80003da:	bf00      	nop
 80003dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80003de:	bc08      	pop	{r3}
 80003e0:	469e      	mov	lr, r3
 80003e2:	4770      	bx	lr
